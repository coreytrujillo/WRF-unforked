!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
MODULE a_module_emissions_driver
  IMPLICIT NONE

CONTAINS
!  Differentiation of emissions_driver in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: tracer chem
!   with respect to varying inputs: scalebb tracer scaleant alt
!                rho_phy chem dz8w
!   RW status of diff variables: scalebb:out tracer:in-out scaleant:out
!                alt:out rho_phy:out chem:in-out dz8w:out
  SUBROUTINE a_emissions_driver(id, ktau, dtstep, dx, adapt_step_flag, &
&    curr_secs, plumerisefire_frq, stepfirepl, bioemdt, stepbioe, &
&    config_flags, gmt, julday, alt, a_alt, t_phy, moist, p8w, t8w, u_phy&
&    , v_phy, vvel, e_bio, p_phy, chem, a_chem, rho_phy, a_rho_phy, dz8w&
&    , a_dz8w, ne_area, emis_ant, emis_vol, tsk, erod, g, emis_seas, &
&    emis_dust, tracer, a_tracer, scaleant, a_scaleant, scaleant_frq, &
&    stepscaleant, num_ant_steps, scaleant_rpt_int, scalebb, a_scalebb, scalebb_frq, &
&    stepscalebb, num_bb_steps, scalebb_rpt_int, check_count, checkpoint_interval,  &
&    ebu, ebu_in, mean_fct_agtf, mean_fct_agef,                    &
&    mean_fct_agsv, mean_fct_aggr, firesize_agtf, firesize_agef, &
&    firesize_agsv, firesize_aggr, u10, v10, ivgtyp, isltyp, gsw, vegfra&
&    , rmol, ust, znt, dms_0, erup_beg, erup_end, xland, xlat, xlong, &
&    z_at_w, z, smois, dustin, seasin, sebio_iso, sebio_oli, sebio_api, &
&    sebio_lim, sebio_xyl, sebio_hc3, sebio_ete, sebio_olt, sebio_ket, &
&    sebio_ald, sebio_hcho, sebio_eth, sebio_ora2, sebio_co, sebio_nr, &
&    sebio_sesq, sebio_mbo, noag_grow, noag_nongrow, nononag, slai, &
&    ebio_iso, ebio_oli, ebio_api, ebio_lim, ebio_xyl, ebio_hc3, ebio_ete&
&    , ebio_olt, ebio_ket, ebio_ald, ebio_hcho, ebio_eth, ebio_ora2, &
&    ebio_co, ebio_nr, ebio_no, ebio_sesq, ebio_mbo, ebio_c10h16, &
&    ebio_tol, ebio_bigalk, ebio_ch3oh, ebio_acet, ebio_nh3, ebio_no2, &
&    ebio_c2h5oh, ebio_ch3cooh, ebio_mek, ebio_bigene, ebio_c2h6, &
&    ebio_c2h4, ebio_c3h6, ebio_c3h8, ebio_so2, ebio_dms, ebio_alk3, &
&    ebio_alk4, ebio_alk5, ebio_ole1, ebio_ole2, ebio_aro1, ebio_aro2, &
&    ebio_ccho, ebio_meoh, ebio_ethene, ebio_hcooh, ebio_terp, ebio_bald&
&    , ebio_cco_oh, ebio_rco_oh, clayfrac, sandfrac, dust_alpha, &
&    dust_gamma, dust_smtune, snowh, zs, t2, swdown, nmegan, efmegan, &
&    msebio_isop, mlai, pftp_bt, pftp_nt, pftp_sb, pftp_hb, mtsa, mswdown&
&    , mebio_isop, mebio_apin, mebio_bpin, mebio_bcar, mebio_acet, &
&    mebio_mbo, mebio_no, current_month, ht, refl_10cm, ic_flashrate, &
&    cg_flashrate, emis_aircraft, vprm_in, rad_vprm, lambda_vprm, &
&    alpha_vprm, resp_vprm, xtime, tslb, wet_in, rainc, rainnc, potevp, &
&    sfcevp, lu_index, biomt_par, emit_par, ebio_co2oce, eghg_bio, ids, &
&    ide, jds, jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts&
&    , jte, kts, kte)
    USE module_configure
    USE module_state_description
    USE module_data_radm2
    USE module_data_sorgam, only : mw_so4_aer,anthfac,factnumn,factnuma,factnumc
    USE module_model_constants, only : mwdry
!    USE module_emissions_anthropogenics
!    USE module_add_emiss_burn
    USE a_module_emissions_anthropogenics
    USE a_module_add_emiss_burn
    USE module_plumerise1
    IMPLICIT NONE
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    INTEGER, INTENT(IN) :: id, julday, ne_area, ids, ide, jds, jde, kds&
&    , kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte
    INTEGER, INTENT(IN) :: ktau, stepbioe, stepfirepl
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_moist), INTENT(IN) ::&
&    moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: a_chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_tracer), INTENT(INOUT&
&    ) :: tracer
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_tracer), INTENT(INOUT&
&    ) :: a_tracer
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_ebu), INTENT(INOUT) &
&    :: ebu
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_ebu_in), INTENT(INOUT) :: &
&    ebu_in
    REAL, DIMENSION(ims:ime, jms:jme, ne_area), INTENT(INOUT) :: e_bio
    REAL, DIMENSION(ims:ime, config_flags%kemit, jms:jme, num_emis_ant),&
&    INTENT(IN) :: emis_ant
    INTEGER, INTENT(IN) :: scaleant_frq, scalebb_frq, stepscaleant, &
&    stepscalebb, num_ant_steps, num_bb_steps, &
&    scaleant_rpt_int, scalebb_rpt_int, check_count, checkpoint_interval
    REAL, DIMENSION(ims:ime, num_ant_steps, jms:jme, num_scaleant), &
&    INTENT(IN) :: scaleant
    REAL, DIMENSION(ims:ime, num_ant_steps, jms:jme, num_scaleant) :: &
&    a_scaleant
    REAL, DIMENSION(ims:ime, num_bb_steps, jms:jme, num_scalebb), &
&    INTENT(IN) :: scalebb
    REAL, DIMENSION(ims:ime, num_bb_steps, jms:jme, num_scalebb) :: &
&    a_scalebb
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_emis_vol), INTENT(&
&    INOUT) :: emis_vol
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: dms_0, tsk, &
&    erup_beg, erup_end
    REAL, DIMENSION(ims:ime, jms:jme, 3), INTENT(IN) :: erod
    REAL, DIMENSION(ims:ime, jms:jme, 5), INTENT(INOUT) :: dustin, &
&    seasin
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_emis_dust), OPTIONAL, &
&    INTENT(INOUT) :: emis_dust
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_emis_seas), OPTIONAL, &
&    INTENT(INOUT) :: emis_seas
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(IN) :: &
&    mean_fct_agtf, mean_fct_agef, mean_fct_agsv, mean_fct_aggr, &
&    firesize_agtf, firesize_agef, firesize_agsv, firesize_aggr
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: alt, t_phy&
&    , p_phy, dz8w, t8w, p8w, z_at_w, z, u_phy, v_phy, vvel, rho_phy
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_alt, a_dz8w, &
&    a_rho_phy
    INTEGER, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: ivgtyp, isltyp
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: u10, v10, gsw, &
&    vegfra, rmol, ust, xland, xlat, xlong, znt, rainc, rainnc, potevp, &
&    sfcevp, lu_index
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(IN) :: clayfrac&
&    , sandfrac, snowh
    REAL, INTENT(IN) :: dust_alpha, dust_gamma, dust_smtune
    REAL, DIMENSION(config_flags%num_soil_layers), INTENT(IN) :: zs
    REAL, DIMENSION(ims:ime, config_flags%num_soil_layers, jms:jme), &
&    INTENT(INOUT) :: smois, tslb
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(INOUT) :: &
&    sebio_iso, sebio_oli, sebio_api, sebio_lim, sebio_xyl, sebio_hc3, &
&    sebio_ete, sebio_olt, sebio_ket, sebio_ald, sebio_hcho, sebio_eth, &
&    sebio_ora2, sebio_co, sebio_nr, sebio_sesq, sebio_mbo, noag_grow, &
&    noag_nongrow, nononag, slai, ebio_iso, ebio_oli, ebio_api, ebio_lim&
&    , ebio_xyl, ebio_hc3, ebio_ete, ebio_olt, ebio_ket, ebio_ald, &
&    ebio_hcho, ebio_eth, ebio_ora2, ebio_co, ebio_nr, ebio_no, ebio_sesq&
&    , ebio_mbo, ebio_c10h16, ebio_tol, ebio_bigalk, ebio_ch3oh, &
&    ebio_acet, ebio_nh3, ebio_no2, ebio_c2h5oh, ebio_ch3cooh, ebio_mek, &
&    ebio_bigene, ebio_c2h6, ebio_c2h4, ebio_c3h6, ebio_c3h8, ebio_so2, &
&    ebio_dms, ebio_co2oce, ebio_alk3, ebio_alk4, ebio_alk5, ebio_ole1, &
&    ebio_ole2, ebio_aro1, ebio_aro2, ebio_ccho, ebio_meoh, ebio_ethene, &
&    ebio_hcooh, ebio_terp, ebio_bald, ebio_cco_oh, ebio_rco_oh
    INTEGER, INTENT(IN) :: nmegan
    REAL, DIMENSION(ims:ime, jms:jme, nmegan), OPTIONAL, INTENT(INOUT) &
&    :: efmegan
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(IN) :: &
&    msebio_isop, pftp_bt, pftp_nt, pftp_sb, pftp_hb
    REAL, DIMENSION(ims:ime, jms:jme, 12), OPTIONAL, INTENT(IN) :: mlai&
&    , mtsa, mswdown
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(INOUT) :: &
&    mebio_isop, mebio_apin, mebio_bpin, mebio_bcar, mebio_acet, &
&    mebio_mbo, mebio_no
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: t2, swdown
    INTEGER, INTENT(IN) :: current_month
    REAL(kind=8), INTENT(IN) :: curr_secs
    REAL :: gmtp, gmtm
    INTEGER :: curr_hours, ivolcano
    INTEGER :: endhr, endmin, beghr, begmin, ko, kk4, kl, k_initial, &
&    k_final
    REAL :: emiss_ash_mass, emiss_ash_height, so2_mass, vert_mass_dist(&
&    kts:kte)
    REAL :: eh
    REAL :: area, x1, percen_mass_umbrel, base_umbrel, ashz_above_vent
    REAL, INTENT(IN) :: bioemdt, dtstep, dx, gmt, g
    INTEGER, INTENT(IN) :: plumerisefire_frq
    LOGICAL, INTENT(IN) :: adapt_step_flag
    REAL, DIMENSION(ims:ime, config_flags%kemit_aircraft, jms:jme, &
&    num_emis_aircraft), OPTIONAL, INTENT(IN) :: emis_aircraft
    REAL, DIMENSION(ims:ime, 8, jms:jme, num_vprm_in), INTENT(IN) :: &
&    vprm_in
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_eghg_bio), INTENT(INOUT) ::&
&    eghg_bio
    REAL, DIMENSION(8) :: rad_vprm, lambda_vprm, alpha_vprm, resp_vprm
    REAL, DIMENSION(14), INTENT(IN) :: biomt_par, emit_par
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_wet_in), INTENT(IN) :: &
&    wet_in
    REAL, INTENT(IN) :: xtime
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: ht, ic_flashrate, &
&    cg_flashrate
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: refl_10cm
    INTEGER :: begday, endday, i, j, k, ksub, dust_emiss_active, &
&    seasalt_emiss_active, emiss_ash_hgt
    REAL :: conv, conv3, conv4, oconv3, oconv4
    REAL :: a_conv
    CHARACTER*256 :: message
    LOGICAL :: do_bioemiss, do_plumerisefire, do_ex_volcanoe
    INTEGER :: iant, ibb
    REAL*8 :: result1
    REAL :: arg1
    REAL*8 :: result2
    REAL :: arg2
    REAL*8 :: result3
    INTEGER :: ad_to
    INTEGER :: ad_to0
    INTEGER :: ad_to1
    INTEGER :: ad_to2
    INTEGER :: branch
    REAL :: temp3
    REAL :: temp29
    REAL :: temp57b0
    REAL :: temp2
    REAL :: temp28
    REAL :: temp1
    REAL :: temp13b
    REAL :: temp27
    REAL :: temp0
    REAL :: temp26
    REAL :: temp25
    REAL :: temp24
    REAL :: temp23
    REAL :: temp22
    REAL :: temp59
    REAL :: temp21
    REAL :: temp58
    REAL :: temp49b1
    REAL :: temp20
    REAL :: temp57
    REAL :: temp49b0
    REAL :: temp56
    REAL :: temp55
    REAL :: temp54
    INTEGER :: min4
    REAL :: temp53
    INTEGER :: min3
    REAL :: temp39b
    REAL :: temp52
    INTEGER :: min2
    REAL :: temp51
    INTEGER :: min5
    REAL :: temp50
    REAL :: temp27b
    REAL :: temp53b
    REAL :: temp41b
    REAL :: temp3b
    REAL :: temp19
    REAL :: temp18
    REAL :: temp17
    REAL :: temp63b0
    REAL :: temp16
    REAL :: temp15
    REAL :: temp43b0
    REAL :: temp14
    REAL :: temp13
    REAL :: temp23b0
    REAL :: temp12
    REAL :: temp17b
    REAL :: temp49
    REAL :: temp11
    REAL :: temp43b
    REAL :: temp48
    REAL :: temp10
    REAL :: temp47
    REAL :: temp46
    REAL :: temp45
    REAL :: temp44
    REAL :: temp43
    REAL :: temp42
    REAL :: temp41
    REAL :: temp40
    REAL :: temp47b0
    REAL :: temp27b0
    REAL :: tempb0
    REAL :: temp57b
    REAL :: temp19b
    REAL :: temp45b
    REAL :: temp39b1
    REAL :: temp33b
    REAL :: temp39b0
    REAL :: temp19b1
    REAL :: temp19b0
    REAL :: temp7b
    REAL :: temp39
    REAL :: temp38
    REAL :: temp37
    REAL :: tempb
    REAL :: temp36
    REAL :: temp35
    REAL :: temp34
    REAL :: temp33
    REAL :: temp47b
    REAL :: temp32
    REAL :: temp31
    REAL :: temp41b0
    REAL :: temp30
    REAL :: temp66
    REAL :: temp65
    REAL :: temp23b
    REAL :: temp64
    REAL :: temp63
    REAL :: temp3b0
    REAL :: temp62
    REAL :: temp61
    REAL :: temp53b0
    REAL :: temp60
    REAL :: temp33b0
    REAL :: temp13b0
    REAL :: temp
    REAL :: temp45b0
    REAL :: temp49b
    REAL :: temp9
    REAL :: temp8
    REAL :: temp7
    REAL :: temp37b
    REAL :: temp6
    REAL :: temp63b
    REAL :: temp5
    REAL :: temp4
    REAL :: temp7b0
    do_plumerisefire = .false.
!    IF (config_flags%biomass_burn_opt .EQ. BIOMASSB_MOZC .OR. &
!&        config_flags%biomass_burn_opt .EQ. BIOMASSB_MOZ .OR. &
!&        config_flags%biomass_burn_opt .EQ. BIOMASSB_GHG .OR. &
!&        config_flags%biomass_burn_opt .EQ. BIOMASSB .OR. &
!&        config_flags%biomass_burn_opt .EQ. ADTLBB .OR. &
!&        config_flags%biomass_burn_opt .EQ. ADTLBB_BCCO ) THEN
!      IF (ktau .EQ. 1) THEN
!        do_plumerisefire = .true.
!      ELSE IF (adapt_step_flag) THEN
!        result1 = REAL(dtstep, 8)
!        result2 = REAL(plumerisefire_frq*60., 8)
!        IF (plumerisefire_frq .LE. 0 .OR. curr_secs + 0.01 &
!&            .GE. FLOOR( (curr_secs - result1) /real(plumerisefire_frq*60.,8)+1.0D0 )*real(plumerisefire_frq*60.,8)) &
!           do_plumerisefire = .true.
!      ELSE IF (MOD(ktau, stepfirepl) .EQ. 0 .OR. stepfirepl .EQ. 1) THEN
!        do_plumerisefire = .true.
!      END IF
!    END IF
    iant = 1
    IF (stepscaleant .GT. 0) THEN
      IF (ktau .EQ. 1) THEN
        iant = 1
      ELSE IF (adapt_step_flag) THEN
        result1 = REAL(scaleant_frq*60., 8)
        iant = ABS( INT(curr_secs/result1 + 1.0, 8) )
      ELSE
        DO k=2,ktau
          IF (MOD(k, stepscaleant) .EQ. 0 .OR. stepscaleant .EQ. 1) iant&
&             = iant + 1
        END DO
      END IF
      IF ( check_count .gt. 1 ) then
         iant=iant+(check_count-1)*checkpoint_interval/scaleant_frq
      ENDIF
      IF ( scaleant_rpt_int .gt. 0 ) iant = mod(iant-1 , scaleant_rpt_int) + 1
    END IF
    IF (iant .GT. num_ant_steps .OR. iant .LE. 0) THEN
       WRITE(message, *) 'emissions_driver: need to increase num_ant_steps, ktau,iant = '&
&                                 , ktau,iant
       CALL wrf_error_fatal( trim(message) )
    ENDIF

    ibb = 1
    IF (stepscalebb .GT. 0) THEN
      IF (ktau .EQ. 1) THEN
        ibb = 1
      ELSE IF (adapt_step_flag) THEN
        result1 = REAL(scalebb_frq*60., 8)
        ibb = ABS( INT(curr_secs/result1 + 1.0, 8) )
      ELSE
        DO k=2,ktau
          IF (MOD(k, stepscalebb) .EQ. 0 .OR. stepscalebb .EQ. 1) ibb = &
&              ibb + 1
        END DO
      END IF
      IF ( check_count .gt. 1 ) then
         ibb=ibb+(check_count-1)*checkpoint_interval/scalebb_frq
      ENDIF
      IF ( scalebb_rpt_int .gt. 0 ) ibb = mod(ibb-1 , scalebb_rpt_int) + 1
    END IF
    IF (ibb .GT. num_bb_steps .OR. ibb .LE. 0) THEN
       WRITE(message, *) 'emissions_driver: need to increase num_bb_steps, ktau,ibb = '&
&                               , ktau,ibb
       CALL wrf_error_fatal( trim(message) )
    ENDIF
    WRITE(message, *) 'emissions_driver_ad, iant,ibb,curr_secs,ktauc = ',iant,ibb,curr_secs,ktau
    CALL wrf_debug( 16, TRIM(message) )
    IF (do_plumerisefire) THEN
      CALL WRF_DEBUG(15, 'fire emissions: calling plumerise')
      WRITE(0, *) ktau, stepfirepl
      CALL PLUMERISE_DRIVER(id, ktau, dtstep, ebu, ebu_in, mean_fct_agtf&
&                      , mean_fct_agef, mean_fct_agsv, mean_fct_aggr, &
&                      firesize_agtf, firesize_agef, firesize_agsv, &
&                      firesize_aggr, config_flags, t_phy, moist, rho_phy&
&                      , vvel, u_phy, v_phy, p_phy, emis_ant, z_at_w, z, &
&                      config_flags%scale_fire_emiss, ids, ide, jds, jde&
&                      , kds, kde, ims, ime, jms, jme, kms, kme, its, ite&
&                      , jts, jte, kts, kte)
    END IF
    SELECT CASE  (config_flags%tracer_opt) 
    CASE (TRACER_SMOKE, TRACER_TEST2) 
      CALL PUSHCONTROL1B(0)
    CASE DEFAULT
      CALL PUSHCONTROL1B(1)
    END SELECT
    ksub = 0
    SELECT CASE  (config_flags%biomass_burn_opt) 
    CASE (BIOMASSB, BIOMASSB_MOZC, BIOMASSB_MOZ, BIOMASSB_GHG, &
&    ADTLBB, ADTLBB_BCCO, ADTLBB_BC) 
      CALL PUSHCONTROL1B(0)
    CASE DEFAULT
      CALL PUSHCONTROL1B(1)
    END SELECT
    SELECT CASE  (config_flags%chem_opt) 
    CASE (GOCARTRACM_KPP, GOCARTRADM2) 
      IF (config_flags%emiss_inpt_opt .NE. 3) THEN
        IF (config_flags%kemit .GT. kte - ksub) THEN
          k = config_flags%kemit
          WRITE(message, &
&          '(" WARNING: EMISSIONS_DRIVER: KEMIT > KTE ",3i6)') kme, kte -&
&          ksub, k
        END IF
        CALL PUSHCONTROL1B(1)
      ELSE
        CALL PUSHCONTROL1B(0)
      END IF
      DO j=jts,jte
        DO i=its,ite
          IF (config_flags%kemit .GT. kte - ksub) THEN
            min5 = kte - ksub
          ELSE
            min5 = config_flags%kemit
          END IF
          k = min5 + 1
          CALL PUSHINTEGER4(k - 1)
        END DO
      END DO
      DO j=jte,jts,-1
        DO i=ite,its,-1
          CALL POPINTEGER4(ad_to)
          DO k=ad_to,kts,-1
            temp2 = dz8w(i, k, j)
            temp = alt(i, k, j)/temp2
            temp1 = emis_ant(i, k, j, p_e_ecj)
            temp0 = emis_ant(i, k, j, p_e_eci)
            tempb0 = dtstep*a_chem(i, k, j, p_bc1)
            tempb = (temp0*scaleant(i, iant, j, p_scant_eci)+temp1*&
&              scaleant(i, iant, j, p_scant_ecj))*tempb0/temp2
            temp6 = dz8w(i, k, j)
            temp3 = alt(i, k, j)/temp6
            temp5 = emis_ant(i, k, j, p_e_orgi)
            temp4 = emis_ant(i, k, j, p_e_orgj)
            temp3b0 = dtstep*a_chem(i, k, j, p_oc1)
            temp3b = (temp4*scaleant(i, iant, j, p_scant_orgj)+temp5*&
&              scaleant(i, iant, j, p_scant_orgi))*temp3b0/temp6
            temp12 = dz8w(i, k, j)
            temp7 = alt(i, k, j)/temp12
            temp11 = emis_ant(i, k, j, p_e_no3i)
            temp10 = emis_ant(i, k, j, p_e_no3j)
            temp9 = emis_ant(i, k, j, p_e_pm25i)
            temp8 = emis_ant(i, k, j, p_e_pm25j)
            temp7b = (temp8*scaleant(i, iant, j, p_scant_pm25j)+temp9*&
&              scaleant(i, iant, j, p_scant_pm25i)+temp10*scaleant(i, &
&              iant, j, p_scant_no3j)+temp11*scaleant(i, iant, j, &
&              p_scant_no3i))*dtstep*a_chem(i, k, j, p_p25)/temp12
            temp16 = mw_so4_aer*dz8w(i, k, j)
            temp13 = alt(i, k, j)/temp16
            temp15 = emis_ant(i, k, j, p_e_so4j)
            temp14 = emis_ant(i, k, j, p_e_so4i)
            temp13b = dtstep*1.e-3*mwdry*a_chem(i, k, j, p_sulf)
            temp13b0 = (temp14*scaleant(i, iant, j, p_scant_so4i)+&
&              temp15*scaleant(i, iant, j, p_scant_so4j))*temp13b/&
&              temp16
            a_scaleant(i, iant, j, p_scant_so4i) = a_scaleant(i, iant, j&
&              , p_scant_so4i) + temp13*temp14*temp13b
            a_scaleant(i, iant, j, p_scant_so4j) = a_scaleant(i, iant, j&
&              , p_scant_so4j) + temp13*temp15*temp13b
            a_alt(i, k, j) = a_alt(i, k, j) + temp7b + tempb + &
&              temp3b + temp13b0
            a_dz8w(i, k, j) = a_dz8w(i, k, j) - temp7*temp7b - temp*&
&              tempb - temp3*temp3b - temp13*mw_so4_aer*temp13b0
            temp7b0 = dtstep*temp7*a_chem(i, k, j, p_p25)
            a_scaleant(i, iant, j, p_scant_pm25j) = a_scaleant(i, &
&              iant, j, p_scant_pm25j) + temp8*temp7b0
            a_scaleant(i, iant, j, p_scant_pm25i) = a_scaleant(i, &
&              iant, j, p_scant_pm25i) + temp9*temp7b0
            a_scaleant(i, iant, j, p_scant_no3j) = a_scaleant(i, iant, j&
&              , p_scant_no3j) + temp10*temp7b0
            a_scaleant(i, iant, j, p_scant_no3i) = a_scaleant(i, iant, j&
&              , p_scant_no3i) + temp11*temp7b0
            a_scaleant(i, iant, j, p_scant_orgj) = a_scaleant(i, iant, j&
&              , p_scant_orgj) + temp3*temp4*temp3b0
            a_scaleant(i, iant, j, p_scant_orgi) = a_scaleant(i, iant, j&
&              , p_scant_orgi) + temp3*temp5*temp3b0
            a_scaleant(i, iant, j, p_scant_eci) = a_scaleant(i, iant, j&
&              , p_scant_eci) + temp*temp0*tempb0
            a_scaleant(i, iant, j, p_scant_ecj) = a_scaleant(i, iant, j&
&              , p_scant_ecj) + temp*temp1*tempb0
          END DO
        END DO
      END DO
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        a_rho_phy = 0.0_8
      ELSE
        CALL WRF_DEBUG(15, 'a_emissions_driver calling a_add_anthropogenics'&
&                )

        CALL A_ADD_ANTHROPOGENICS(id, dtstep, dz8w, a_dz8w, config_flags&
&                            , rho_phy, a_rho_phy, alt, a_alt, chem, &
&                            a_chem, emis_ant, emis_aircraft, scaleant(:&
&                            , iant, :, :), a_scaleant(:, iant, :, :), &
&                            ids, ide, jds, jde, kds, kde, ims, ime, jms&
&                            , jme, kms, kme, its, ite, jts, jte, kts, &
&                            kte)
      END IF
    CASE (GOCART_SIMPLE) 
      IF (config_flags%emiss_opt .LE. 5) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min2 = kte - ksub
            ELSE
              min2 = config_flags%kemit
            END IF
            k = min2 + 1
            CALL PUSHINTEGER4(k - 1)
          END DO
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (config_flags%emiss_opt .EQ. 6) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min3 = kte - ksub
            ELSE
              min3 = config_flags%kemit
            END IF
            k = min3 + 1
            CALL PUSHINTEGER4(k - 1)
          END DO
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (config_flags%emiss_opt .EQ. ADTLANT) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min4 = kte - ksub
            ELSE
              min4 = config_flags%kemit
            END IF
            k = min4 + 1
            CALL PUSHINTEGER4(k - 1)
          END DO
        END DO
        DO j=jte,jts,-1
          DO i=ite,its,-1
            CALL POPINTEGER4(ad_to2)
            DO k=ad_to2,kts,-1
              temp49b1 = emis_ant(i, k, j, p_e_so2)*a_chem(i, k, j, &
&                p_so2)
              a_conv = scaleant(i, iant, j, p_scant_so2)*temp49b1
              temp48 = 60.*rho_phy(i, k, j)
              temp47 = temp48*dz8w(i, k, j)
              temp47b0 = -(dtstep*4.828e-4*a_conv/temp47**2)
              temp52 = dz8w(i, k, j)
              temp49 = alt(i, k, j)/temp52
              temp51 = emis_ant(i, k, j, p_e_ecj)
              temp50 = emis_ant(i, k, j, p_e_eci)
              temp49b0 = dtstep*a_chem(i, k, j, p_bc1)
              temp49b = (temp50*scaleant(i, iant, j, p_scant_bc)+&
&                temp51*scaleant(i, iant, j, p_scant_bc))*temp49b0/&
&                temp52
              temp56 = dz8w(i, k, j)
              temp53 = alt(i, k, j)/temp56
              temp55 = emis_ant(i, k, j, p_e_orgi)
              temp54 = emis_ant(i, k, j, p_e_orgj)
              temp53b0 = dtstep*a_chem(i, k, j, p_oc1)
              temp53b = (temp54*scaleant(i, iant, j, p_scant_oc)+&
&                temp55*scaleant(i, iant, j, p_scant_oc))*temp53b0/&
&                temp56
              temp62 = dz8w(i, k, j)
              temp57 = alt(i, k, j)/temp62
              temp61 = emis_ant(i, k, j, p_e_no3i)
              temp60 = emis_ant(i, k, j, p_e_no3j)
              temp59 = emis_ant(i, k, j, p_e_pm25i)
              temp58 = emis_ant(i, k, j, p_e_pm25j)
              temp57b = (temp58*scaleant(i, iant, j, p_scant_pm_25)+&
&                temp59*scaleant(i, iant, j, p_scant_pm_25)+temp60*&
&                scaleant(i, iant, j, p_scant_no3)+temp61*scaleant(i,  &
&                iant, j, p_scant_no3))*dtstep*a_chem(i, k, j, p_p25)/temp62
              temp66 = mw_so4_aer*dz8w(i, k, j)
              temp63 = alt(i, k, j)/temp66
              temp65 = emis_ant(i, k, j, p_e_so4j)
              temp64 = emis_ant(i, k, j, p_e_so4i)
              temp63b = dtstep*1.e-3*mwdry*a_chem(i, k, j, p_sulf)
              temp63b0 = (temp64*scaleant(i, iant, j, p_scant_sulf)+&
&                temp65*scaleant(i, iant, j, p_scant_sulf))*temp63b/&
&                temp66
              a_scaleant(i, iant, j, p_scant_sulf) = a_scaleant(i,  &
&                iant, j, p_scant_sulf) + (temp63*temp65+temp63*temp64)*&
&                temp63b
              a_alt(i, k, j) = a_alt(i, k, j) + temp57b + temp49b + &
&                temp53b + temp63b0
              a_dz8w(i, k, j) = a_dz8w(i, k, j) + temp48*temp47b0 - &
&                temp49*temp49b - temp57*temp57b - temp53*temp53b -&
&                temp63*mw_so4_aer*temp63b0
              temp57b0 = dtstep*temp57*a_chem(i, k, j, p_p25)
              a_scaleant(i, iant, j, p_scant_pm_25) = a_scaleant(i,  &
&                iant, j, p_scant_pm_25) + (temp59+temp58)*temp57b0
              a_scaleant(i, iant, j, p_scant_no3) = a_scaleant(i,  &
&                iant, j, p_scant_no3) + (temp61+temp60)*temp57b0
              a_scaleant(i, iant, j, p_scant_oc) = a_scaleant(i, iant, j&
&                , p_scant_oc) + (temp53*temp55+temp53*temp54)*temp53b0
              a_scaleant(i, iant, j, p_scant_bc) = a_scaleant(i, iant, j&
&                , p_scant_bc) + (temp49*temp51+temp49*temp50)*temp49b0
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              a_scaleant(i, iant, j, p_scant_so2) = a_scaleant(i,  &
&                iant, j, p_scant_so2) + conv*temp49b1
              a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + dz8w(i, k, j)*&
&                60.*temp47b0
            END DO
          END DO
        END DO
!      ELSE
!        a_scaleant = 0.0_8
!        a_alt = 0.0_8
!        a_rho_phy = 0.0_8
!        a_dz8w = 0.0_8
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        DO j=jte,jts,-1
          DO i=ite,its,-1
            CALL POPINTEGER4(ad_to1)
            DO k=ad_to1,kts,-1
              temp39b = emis_ant(i, k, j, p_e_so2)*a_chem(i, k, j, &
&                p_so2)
              temp40 = dz8w(i, k, j)
              temp39b1 = emis_ant(i, k, j, p_e_bc)*dtstep*a_chem(i, k&
&                , j, p_bc1)
              temp39b0 = scaleant(i, iant, j, p_scant_bc)*temp39b1/&
&                temp40
              temp42 = dz8w(i, k, j)
              temp41b0 = emis_ant(i, k, j, p_e_oc)*dtstep*a_chem(i, k&
&                , j, p_oc1)
              temp41b = scaleant(i, iant, j, p_scant_oc)*temp41b0/&
&                temp42
              temp44 = dz8w(i, k, j)
              temp43b0 = emis_ant(i, k, j, p_e_pm_25)*dtstep*a_chem(i&
&                , k, j, p_p25)
              temp43b = scaleant(i, iant, j, p_scant_pm_25)*temp43b0&
&                /temp44
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              temp47b = emis_ant(i, k, j, p_e_sulf)*a_chem(i, k, j, &
&                p_sulf)
              a_scaleant(i, iant, j, p_scant_sulf) = a_scaleant(i,  &
&                iant, j, p_scant_sulf) + conv*temp47b
              a_conv = scaleant(i, iant, j, p_scant_so2)*temp39b + &
&                scaleant(i, iant, j, p_scant_sulf)*temp47b
              temp46 = dz8w(i, k, j)
              temp45 = alt(i, k, j)/temp46
              temp45b = emis_ant(i, k, j, p_e_pm_10)*dtstep*a_chem(i, &
&                k, j, p_p10)
              temp45b0 = scaleant(i, iant, j, p_scant_pm_10)*temp45b&
&                /temp46
              a_scaleant(i, iant, j, p_scant_pm_10) = a_scaleant(i,  &
&                iant, j, p_scant_pm_10) + temp45*temp45b
              a_alt(i, k, j) = a_alt(i, k, j) + temp43b + temp39b0 +&
&                temp41b + temp45b0
              temp43 = alt(i, k, j)/temp44
              a_scaleant(i, iant, j, p_scant_pm_25) = a_scaleant(i,  &
&                iant, j, p_scant_pm_25) + temp43*temp43b0
              temp41 = alt(i, k, j)/temp42
              a_scaleant(i, iant, j, p_scant_oc) = a_scaleant(i, iant, j&
&                , p_scant_oc) + temp41*temp41b0
              temp39 = alt(i, k, j)/temp40
              a_scaleant(i, iant, j, p_scant_bc) = a_scaleant(i, iant, j&
&                , p_scant_bc) + temp39*temp39b1
              a_scaleant(i, iant, j, p_scant_so2) = a_scaleant(i,  &
&                iant, j, p_scant_so2) + conv*temp39b
              temp38 = 60.*rho_phy(i, k, j)
              temp37 = temp38*dz8w(i, k, j)
              temp37b = -(dtstep*4.828e-4*a_conv/temp37**2)
              a_dz8w(i, k, j) = a_dz8w(i, k, j) + temp38*temp37b - &
&                temp39*temp39b0 - temp43*temp43b - temp41*temp41b &
&                - temp45*temp45b0
              a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + dz8w(i, k, j)*&
&                60.*temp37b
            END DO
          END DO
        END DO
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        DO j=jte,jts,-1
          DO i=ite,its,-1
            CALL POPINTEGER4(ad_to0)
            DO k=ad_to0,kts,-1
              temp19b1 = emis_ant(i, k, j, p_e_so2)*a_chem(i, k, j, &
&                p_so2)
              a_conv = scaleant(i, iant, j, p_scant_so2)*temp19b1
              temp18 = 60.*rho_phy(i, k, j)
              temp17 = temp18*dz8w(i, k, j)
              temp17b = -(dtstep*4.828e-4*a_conv/temp17**2)
              temp22 = dz8w(i, k, j)
              temp19 = alt(i, k, j)/temp22
              temp21 = emis_ant(i, k, j, p_e_ecj)
              temp20 = emis_ant(i, k, j, p_e_eci)
              temp19b0 = dtstep*a_chem(i, k, j, p_bc1)
              temp19b = (temp20*scaleant(i, iant, j, p_scant_eci)+&
&                temp21*scaleant(i, iant, j, p_scant_ecj))*temp19b0/&
&                temp22
              temp26 = dz8w(i, k, j)
              temp23 = alt(i, k, j)/temp26
              temp25 = emis_ant(i, k, j, p_e_orgi)
              temp24 = emis_ant(i, k, j, p_e_orgj)
              temp23b0 = dtstep*a_chem(i, k, j, p_oc1)
              temp23b = (temp24*scaleant(i, iant, j, p_scant_orgj)+&
&                temp25*scaleant(i, iant, j, p_scant_orgi))*temp23b0/&
&                temp26
              temp32 = dz8w(i, k, j)
              temp27 = alt(i, k, j)/temp32
              temp31 = emis_ant(i, k, j, p_e_no3i)
              temp30 = emis_ant(i, k, j, p_e_no3j)
              temp29 = emis_ant(i, k, j, p_e_pm25i)
              temp28 = emis_ant(i, k, j, p_e_pm25j)
              temp27b = (temp28*scaleant(i, iant, j, p_scant_pm25j)+&
&                temp29*scaleant(i, iant, j, p_scant_pm25i)+temp30*&
&                scaleant(i, iant, j, p_scant_no3j)+temp31*scaleant(i &
&                , iant, j, p_scant_no3i))*dtstep*a_chem(i, k, j, p_p25)/&
&                temp32
              temp36 = mw_so4_aer*dz8w(i, k, j)
              temp33 = alt(i, k, j)/temp36
              temp35 = emis_ant(i, k, j, p_e_so4j)
              temp34 = emis_ant(i, k, j, p_e_so4i)
              temp33b = dtstep*1.e-3*mwdry*a_chem(i, k, j, p_sulf)
              temp33b0 = (temp34*scaleant(i, iant, j, p_scant_so4i)+&
&                temp35*scaleant(i, iant, j, p_scant_so4j))*temp33b/&
&                temp36
              a_scaleant(i, iant, j, p_scant_so4i) = a_scaleant(i,  &
&                iant, j, p_scant_so4i) + temp33*temp34*temp33b
              a_scaleant(i, iant, j, p_scant_so4j) = a_scaleant(i,  &
&                iant, j, p_scant_so4j) + temp33*temp35*temp33b
              a_alt(i, k, j) = a_alt(i, k, j) + temp27b + temp19b + &
&                temp23b + temp33b0
              a_dz8w(i, k, j) = a_dz8w(i, k, j) + temp18*temp17b - &
&                temp19*temp19b - temp27*temp27b - temp23*temp23b -&
&                temp33*mw_so4_aer*temp33b0
              temp27b0 = dtstep*temp27*a_chem(i, k, j, p_p25)
              a_scaleant(i, iant, j, p_scant_pm25j) = a_scaleant(i,  &
&                iant, j, p_scant_pm25j) + temp28*temp27b0
              a_scaleant(i, iant, j, p_scant_pm25i) = a_scaleant(i,  &
&                iant, j, p_scant_pm25i) + temp29*temp27b0
              a_scaleant(i, iant, j, p_scant_no3j) = a_scaleant(i,  &
&                iant, j, p_scant_no3j) + temp30*temp27b0
              a_scaleant(i, iant, j, p_scant_no3i) = a_scaleant(i,  &
&                iant, j, p_scant_no3i) + temp31*temp27b0
              a_scaleant(i, iant, j, p_scant_orgj) = a_scaleant(i,  &
&                iant, j, p_scant_orgj) + temp23*temp24*temp23b0
              a_scaleant(i, iant, j, p_scant_orgi) = a_scaleant(i,  &
&                iant, j, p_scant_orgi) + temp23*temp25*temp23b0
              a_scaleant(i, iant, j, p_scant_eci) = a_scaleant(i,  &
&                iant, j, p_scant_eci) + temp19*temp20*temp19b0
              a_scaleant(i, iant, j, p_scant_ecj) = a_scaleant(i,  &
&                iant, j, p_scant_ecj) + temp19*temp21*temp19b0
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              a_scaleant(i, iant, j, p_scant_so2) = a_scaleant(i,  &
&                iant, j, p_scant_so2) + conv*temp19b1
              a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + dz8w(i, k, j)*&
&                60.*temp17b
            END DO
          END DO
        END DO
      END IF
    CASE (GOCART_BCCO, GOCART_BC) 
      IF (config_flags%emiss_opt .LE. 5) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min2 = kte - ksub
            ELSE
              min2 = config_flags%kemit
            END IF
            k = min2 + 1
            CALL PUSHINTEGER4(k - 1)
          END DO
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF (config_flags%emiss_opt .EQ. 6) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min3 = kte - ksub
            ELSE
              min3 = config_flags%kemit
            END IF
            k = min3 + 1
            CALL PUSHINTEGER4(k - 1)
          END DO
        END DO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      IF(config_flags%emiss_opt == ADTLANT_BCCO .OR. &
         config_flags%emiss_opt == ADTLANT_BC &
       ) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min4 = kte - ksub
            ELSE
              min4 = config_flags%kemit
            END IF
            k = min4 + 1
            CALL PUSHINTEGER4(k - 1)
          END DO
        END DO
        DO j=jte,jts,-1
          DO i=ite,its,-1
            CALL POPINTEGER4(ad_to2)
            DO k=ad_to2,kts,-1
              IF (config_flags%emiss_opt .EQ. ADTLANT_BCCO) THEN
                temp49b1 = emis_ant(i, k, j, p_e_co)*a_chem(i, k, j, p_co)
                a_conv = scaleant(i, iant, j, p_scant_co)*temp49b1

                temp48 = 60.*rho_phy(i, k, j)
                temp47 = temp48*dz8w(i, k, j)
                temp47b0 = -(dtstep*4.828e-4*a_conv/temp47**2)
                temp52 = dz8w(i, k, j)
                temp49 = alt(i, k, j)/temp52
                temp51 = emis_ant(i, k, j, p_e_ecj)
                temp50 = emis_ant(i, k, j, p_e_eci)
                temp49b0 = dtstep*a_chem(i, k, j, p_bc1)
                temp49b = (temp50*scaleant(i, iant, j, p_scant_bc)+&
  &                temp51*scaleant(i, iant, j, p_scant_bc))*temp49b0/&
  &                temp52
                a_alt(i, k, j) = a_alt(i, k, j) + temp49b
                a_dz8w(i, k, j) = a_dz8w(i, k, j) + temp48*temp47b0&
  &                 -  temp49*temp49b 
                a_scaleant(i, iant, j, p_scant_bc) = a_scaleant(i, iant, j&
  &                , p_scant_bc) + (temp49*temp51+temp49*temp50)*temp49b0
                conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
  &                )
                a_scaleant(i, iant, j, p_scant_co) = a_scaleant(i, iant, j, p_scant_co) + &
  &                conv*temp49b1

                a_rho_phy(i, k, j) = a_rho_phy(i, k, j) + dz8w(i, k, j)*&
  &                60.*temp47b0
              ELSE IF (config_flags%emiss_opt .EQ. ADTLANT_BC) THEN
                temp52 = dz8w(i, k, j)
                temp49 = alt(i, k, j)/temp52
                temp51 = emis_ant(i, k, j, p_e_ecj)
                temp50 = emis_ant(i, k, j, p_e_eci)
                temp49b0 = dtstep*a_chem(i, k, j, p_bc1)
                temp49b = (temp50*scaleant(i, iant, j, p_scant_bc)+&
&                  temp51*scaleant(i, iant, j, p_scant_bc))*temp49b0/&
&                  temp52
                a_alt(i, k, j) = a_alt(i, k, j) + temp49b
                a_dz8w(i, k, j) = a_dz8w(i, k, j) -  temp49*temp49b
                a_scaleant(i, iant, j, p_scant_bc) = a_scaleant(i, iant, j&
&                  , p_scant_bc) + (temp49*temp51+temp49*temp50)*temp49b0
              END IF
            END DO
          END DO
        END DO
!      ELSE
!        a_scaleant = 0.0_8
!        a_alt = 0.0_8
!        a_rho_phy = 0.0_8
!        a_dz8w = 0.0_8
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        DO j=jte,jts,-1
          DO i=ite,its,-1
            CALL POPINTEGER4(ad_to1)
            DO k=ad_to1,kts,-1
              temp40 = dz8w(i, k, j)
              temp39b1 = emis_ant(i, k, j, p_e_bc)*dtstep*a_chem(i, k&
&                , j, p_bc1)
              temp39b0 = scaleant(i, iant, j, p_scant_bc)*temp39b1/&
&                temp40
!              a_alt(i, k, j) = a_alt(i, k, j) + temp43b + temp39b0 +&
!&                temp41b + temp45b0
              a_alt(i, k, j) = a_alt(i, k, j) + temp39b0
              temp39 = alt(i, k, j)/temp40
              a_scaleant(i, iant, j, p_scant_bc) = a_scaleant(i, iant, j&
&                , p_scant_bc) + temp39*temp39b1
              a_dz8w(i, k, j) = a_dz8w(i, k, j) - temp39*temp39b0
            END DO
          END DO
        END DO
      END IF
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        DO j=jte,jts,-1
          DO i=ite,its,-1
            CALL POPINTEGER4(ad_to0)
            DO k=ad_to0,kts,-1
              temp22 = dz8w(i, k, j)
              temp19 = alt(i, k, j)/temp22
              temp21 = emis_ant(i, k, j, p_e_ecj)
              temp20 = emis_ant(i, k, j, p_e_eci)
              temp19b0 = dtstep*a_chem(i, k, j, p_bc1)
              temp19b = (temp20*scaleant(i, iant, j, p_scant_eci)+&
&                temp21*scaleant(i, iant, j, p_scant_ecj))*temp19b0/&
&                temp22
              a_alt(i, k, j) = a_alt(i, k, j) + temp19b 
              a_dz8w(i, k, j) = a_dz8w(i, k, j) - temp19*temp19b
              a_scaleant(i, iant, j, p_scant_eci) = a_scaleant(i,  &
&                iant, j, p_scant_eci) + temp19*temp20*temp19b0
              a_scaleant(i, iant, j, p_scant_ecj) = a_scaleant(i,  &
&                iant, j, p_scant_ecj) + temp19*temp21*temp19b0
            END DO
          END DO
        END DO
      END IF
    CASE DEFAULT
    END SELECT
    CALL POPCONTROL1B(branch)
    IF (branch .EQ. 0) THEN
      CALL WRF_DEBUG(15, 'fire emissions: adding biomassb emissions adjoint')
      CALL A_ADD_EMIS_BURN(id, dtstep, ktau, dz8w, a_dz8w, rho_phy, &
&                     a_rho_phy, chem, a_chem, julday, gmt, xlat, xlong, &
&                     t_phy, p_phy, ebu, config_flags%chem_opt, 0, &
&                     config_flags%biomass_burn_opt, scalebb(:, ibb, :, :&
&                     ), a_scalebb(:, ibb, :, :), config_flags%&
&                     scale_burn_opt, num_chem, ids, ide, jds, jde, kds, &
&                     kde, ims, ime, jms, jme, kms, kme, its, ite, jts, &
&                     jte, kts, kte)
    END IF
    CALL POPCONTROL1B(branch)
      CALL WRF_DEBUG(15, 'fire emissions: adding biomassb emissions adjoint')

    IF (branch .EQ. 0) CALL A_ADD_EMIS_BURN(id, dtstep, ktau, dz8w, &
&                                      a_dz8w, rho_phy, a_rho_phy, tracer&
&                                      , a_tracer, julday, gmt, xlat, &
&                                      xlong, t_phy, p_phy, ebu, 0, &
&                                      config_flags%tracer_opt, &
&                                      config_flags%biomass_burn_opt, &
&                                      scalebb(:, ibb, :, :), a_scalebb(:&
&                                      , ibb, :, :), config_flags%&
&                                      scale_burn_opt, num_tracer, ids, &
&                                      ide, jds, jde, kds, kde, ims, ime&
&                                      , jms, jme, kms, kme, its, ite, &
&                                      jts, jte, kts, kte)
  END SUBROUTINE a_emissions_driver
END MODULE a_module_emissions_driver
