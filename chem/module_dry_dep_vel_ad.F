!
!   WRF-chem V3.2 : Original version of dry_dep_driver written by Georg Grell (ESRL/GSD)
!                   VERTMX was originally developed by Mariusz Pagowski and modified by
!                   Richard C. Easter (PNNL)
! 10/11/2011 - Ravan Ahmadov (NOAA) updated to include the RACM_SOA_VBS option
!
! 10/14/2013 - Jonathan Guerrette separated dep velocity calc from dry_dep_driver
!               only for ACM2 PBL scheme
!
!WRF:MODEL_LAYER:CHEMICS
!
MODULE A_MODULE_DRY_DEP_VEL
  IMPLICIT NONE
CONTAINS
!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
!  Differentiation of dry_dep_vel in reverse (adjoint) mode (with options r8 noISIZE):
!   gradient     of useful results: dep_vel rmol
!   with respect to varying inputs: ust t_phy znt dep_vel rmol
!                p_phy moist pbl z_at_w
!   RW status of diff variables: ust:out t_phy:out znt:out dep_vel:in-zero
!                rmol:in-out p_phy:out moist:out pbl:out z_at_w:out
!BSINGH:01/31/2013: Added is_CAMMGMP_used for MAM drydep
  SUBROUTINE A_DRY_DEP_VEL(id, curr_secs, ktau, dtstep, config_flags, &
&    gmt, julday, t_phy, a_t_phy, moist, a_moist, p8w, t8w, alt, p_phy, &
&    a_p_phy, chem, rho_phy, dz8w, hfx, dx, raincv, ivgtyp, tsk, gsw, &
&    vegfra, pbl, a_pbl, rmol, a_rmol, ust, a_ust, znt, a_znt, xlat, &
&    xlong, z, z_at_w, a_z_at_w, xland, h2oaj, h2oai, nu3, ac3, cor3, &
&    asulf, ahno3, anh3, cvaro1, cvaro2, cvalk1, cvole1, cvapi1, cvapi2, &
&    cvlim1, cvlim2, numgas, current_month, dvel, snowh,                &
               dustdrydep_1,dustdrydep_2,dustdrydep_3,                    &
               dustdrydep_4,dustdrydep_5,                                 &
               depvelocity,                                               &
               is_cammgmp_used&
&    , dep_vel, a_dep_vel, num_vert_mix, ids, ide, jds, jde, kds, kde, &
&    ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte)
    USE module_model_constants
    USE module_configure
    USE module_state_description
    USE module_domain_type, only : domain
    USE a_module_gocart_drydep
    USE a_module_dep_simple
    USE module_dep_simple

    IMPLICIT NONE
!----------------------------------------------------------------------
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
!BSINGH:01/31/2013: Added is_CAMMGMP_used for MAM drydep
    LOGICAL, INTENT(IN) :: is_cammgmp_used
    INTEGER, INTENT(IN) :: id, julday, numgas, current_month, ids, ide, &
&    jds, jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte&
&    , kts, kte
    INTEGER, INTENT(IN) :: ktau
    INTEGER :: l
    REAL, INTENT(IN) :: curr_secs
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_moist), INTENT(IN) ::&
&    moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_moist) :: a_moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: chem
    REAL, DIMENSION(ims:ime, config_flags%kdepvel, jms:jme, config_flags&
&    %ndepvel), INTENT(INOUT) :: dep_vel
    REAL, DIMENSION(ims:ime, config_flags%kdepvel, jms:jme, config_flags&
&    %ndepvel), INTENT(INOUT) :: a_dep_vel
    REAL, DIMENSION(ims:ime, config_flags%kdvel, jms:jme, num_dvel), &
&    INTENT(INOUT) :: dvel
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: t_phy, alt&
&    , p_phy, dz8w, t8w, p8w, z_at_w, rho_phy, z
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: a_t_phy, a_p_phy, &
&    a_z_at_w
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(INOUT) :: h2oaj, &
&    h2oai, nu3, ac3, cor3, asulf, ahno3, anh3, cvaro1, cvaro2, cvalk1, &
&    cvole1, cvapi1, cvapi2, cvlim1, cvlim2
    INTEGER, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: ivgtyp
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: tsk, gsw, vegfra&
&    , pbl, rmol, ust, hfx, xlat, xlong, snowh, xland, znt, raincv
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: a_pbl
    REAL, INTENT(IN) :: dtstep, gmt, dx
    INTEGER, INTENT(INOUT) :: num_vert_mix
   REAL, DIMENSION( ims:ime, jms:jme ), INTENT(INOUT) ::        &
                dustdrydep_1, dustdrydep_2, dustdrydep_3,       &
                dustdrydep_4, dustdrydep_5, depvelocity
!--- deposition and emissions stuff
! .. Parameters ..
! ..
! .. Local Scalars ..
    REAL :: clwchem, dvfog, dvpart, rad, rhchem, ta, ustar, vegfrac, z1&
&    , zntt
    INTEGER :: iland, iprt, iseason, jce, jcs, n, nr, ipr, jpr, nvr, &
&    idrydep_onoff, aer_mech_id
    INTEGER :: l2, m, lnum, lmass
    LOGICAL :: highnh3, rainflag, vegflag, wetflag
! ..
! .. Local Arrays ..
    REAL :: p(kts:kte)
    REAL, DIMENSION(its:ite, jts:jte, num_chem) :: ddvel
    REAL, DIMENSION(its:ite, jts:jte, num_chem) :: a_ddvel
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme) :: dryrho_phy
    REAL, DIMENSION(kms:kme) :: dryrho_1d
! turbulent transport
    REAL :: pblst(kts:kte), ekmfull(kts:kte+1), zzfull(kts:kte+1), zz(&
&    kts:kte)
    INTEGER :: ii, jj, kk, i, j, k, nv
    INTEGER :: ll
!
! necessary for aerosols (module dependent)
!
    REAL, DIMENSION(its:ite, jts:jte) :: aer_res, aer_res_def, &
&    aer_res_zcen
    REAL, DIMENSION(its:ite, jts:jte) :: a_aer_res_def
!Balwinder.Singh@pnnl.gov: pointer from Q array to CHEM array
!    INTEGER, DIMENSION(pcnst) :: lptr_q_to_chem
!Balwinder.Singh@pnnl.gov: Flag (true or false) which decides whether to  vertical mix a constituent or not
    LOGICAL, DIMENSION(num_chem) :: vertmixaero
    REAL, PARAMETER :: m2cm=100.
    INTEGER :: k_a, k_c, kmax, m_mam
    REAL, DIMENSION(its:ite, jts:jte) :: frac_removed
    INTEGER :: branch
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: a_ust
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: a_rmol
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(INOUT) :: a_znt
    INTEGER :: y1
!
! compute dry deposition velocities = ddvel
!
! 28-jun-2005 rce - initialize ddvel=0; call aerosol drydep routine
!           only when gas_drydep_opt == WESELY
!       the wesely_driver routine computes aer_res, and currently
!	    you cannot compute aerosol drydep without it !!
! 08-jul-2005 rce - pass idrydep_onoff to mixactivate routines
!
    ddvel(:, :, :) = 0.0
    SELECT CASE  (config_flags%gas_drydep_opt) 
    CASE (wesely) 
!
! gas_drydep_opt == WESELY means 
!     wesely for gases 
!     other (appropriate) routine for aerosols
!
      IF (config_flags%chem_opt .EQ. gocart_simple .OR. &
                config_flags%chem_opt .EQ. gocart_bcco .OR. &
                config_flags%chem_opt .EQ. gocart_bc) THEN

        CALL PUSHREAL8ARRAY(rmol, (ime-ims+1)*(jme-jms+1))
        CALL WESELY_DRIVER(id, ktau, dtstep, config_flags, current_month&
&                     , gmt, julday, t_phy, moist, p8w, t8w, raincv, &
&                     p_phy, chem, rho_phy, dz8w, ddvel, aer_res_def, &
&                     aer_res_zcen, ivgtyp, tsk, gsw, vegfra, pbl, rmol, &
&                     ust, znt, xlat, xlong, z, z_at_w, snowh, numgas, &
&                     ids, ide, jds, jde, kds, kde, ims, ime, jms, jme, &
&                     kms, kme, its, ite, jts, jte, kts, kte)
!
! this does aerosol species (dust,seas, bc,oc) for gocart only
!
        CALL PUSHCONTROL3B(0)
      ELSE IF (config_flags%chem_opt .EQ. dust) THEN
        CALL PUSHCONTROL3B(1)
      ELSE IF (config_flags%chem_opt .EQ. gocartracm_kpp) THEN
        CALL PUSHREAL8ARRAY(rmol, (ime-ims+1)*(jme-jms+1))
!
! this does aerosol species (dust,seas, bc,oc) for gocart only
!
        CALL WESELY_DRIVER(id, ktau, dtstep, config_flags, current_month&
&                     , gmt, julday, t_phy, moist, p8w, t8w, raincv, &
&                     p_phy, chem, rho_phy, dz8w, ddvel, aer_res_def, &
&                     aer_res_zcen, ivgtyp, tsk, gsw, vegfra, pbl, rmol, &
&                     ust, znt, xlat, xlong, z, z_at_w, snowh, numgas, &
&                     ids, ide, jds, jde, kds, kde, ims, ime, jms, jme, &
&                     kms, kme, its, ite, jts, jte, kts, kte)
        CALL PUSHCONTROL3B(2)
      ELSE
        CALL PUSHCONTROL3B(3)
      END IF
    CASE DEFAULT
      CALL PUSHCONTROL3B(4)
    END SELECT
    IF (config_flags%ndepvel .GT. num_vert_mix) THEN
      y1 = num_vert_mix
    ELSE
      y1 = config_flags%ndepvel
    END IF
    IF (1 .LT. y1) THEN
      ll = y1
    ELSE
      ll = 1
    END IF
    a_ddvel = 0.0_8
    a_aer_res_def = 0.0_8

    DO l=ll,1,-1
      DO j=jte,jts,-1
        DO k=config_flags%kdepvel,1,-1
          DO i=ite,its,-1
            a_ddvel(i, j, l) = a_ddvel(i, j, l) + a_dep_vel(i, k, j, l)
            a_dep_vel(i, k, j, l) = 0.0_8
          END DO
        END DO
      END DO
    END DO
    CALL POPCONTROL3B(branch)
    IF (branch .LT. 2) THEN
      IF (branch .EQ. 0) THEN
        CALL A_GOCART_DRYDEP_DRIVER(dtstep, config_flags, numgas, t_phy&
&                              , moist, p8w, t8w, rmol, a_rmol, &
&                              aer_res_def, a_aer_res_def, p_phy, chem, &
&                              rho_phy, dz8w, ddvel, a_ddvel, xland, hfx&
&                              , ivgtyp, tsk, vegfra, pbl, a_pbl, ust, &
&                              a_ust, znt, a_znt, xlat, xlong, &
                               dustdrydep_1,dustdrydep_2,dustdrydep_3,                 &
                               dustdrydep_4,dustdrydep_5,                              &
                               depvelocity,                                            &
                               ids, ide, &
&                              jds, jde, kds, kde, ims, ime, jms, jme, &
&                              kms, kme, its, ite, jts, jte, kts, kte)
        CALL POPREAL8ARRAY(rmol, (ime-ims+1)*(jme-jms+1))
        CALL A_WESELY_DRIVER(id, ktau, dtstep, config_flags, &
&                       current_month, gmt, julday, t_phy, a_t_phy, moist&
&                       , a_moist, p8w, t8w, raincv, p_phy, a_p_phy, chem&
&                       , rho_phy, dz8w, ddvel, a_ddvel, aer_res_def, &
&                       a_aer_res_def, aer_res_zcen, ivgtyp, tsk, gsw, &
&                       vegfra, pbl, rmol, a_rmol, ust, a_ust, znt, a_znt&
&                       , xlat, xlong, z, z_at_w, a_z_at_w, snowh, numgas&
&                       , ids, ide, jds, jde, kds, kde, ims, ime, jms, &
&                       jme, kms, kme, its, ite, jts, jte, kts, kte)
      ELSE
        CALL A_GOCART_DRYDEP_DRIVER(dtstep, config_flags, numgas, t_phy&
&                              , moist, p8w, t8w, rmol, a_rmol, &
&                              aer_res_def, a_aer_res_def, p_phy, chem, &
&                              rho_phy, dz8w, ddvel, a_ddvel, xland, hfx&
&                              , ivgtyp, tsk, vegfra, pbl, a_pbl, ust, &
&                              a_ust, znt, a_znt, xlat, xlong, &
                               dustdrydep_1,dustdrydep_2,dustdrydep_3,                 &
                               dustdrydep_4,dustdrydep_5,                              &
                               depvelocity,                                            &
                               ids, ide, &
&                              jds, jde, kds, kde, ims, ime, jms, jme, &
&                              kms, kme, its, ite, jts, jte, kts, kte)
      END IF
    ELSE IF (branch .EQ. 2) THEN
      CALL A_GOCART_DRYDEP_DRIVER(dtstep, config_flags, numgas, t_phy, &
&                            moist, p8w, t8w, rmol, a_rmol, aer_res_def, &
&                            a_aer_res_def, p_phy, chem, rho_phy, dz8w, &
&                            ddvel, a_ddvel, xland, hfx, ivgtyp, tsk, &
&                            vegfra, pbl, a_pbl, ust, a_ust, znt, a_znt, &
&                            xlat, xlong, &
                             dustdrydep_1,dustdrydep_2,dustdrydep_3,                 &
                             dustdrydep_4,dustdrydep_5,                              &
                             depvelocity,                                            &
                             ids, ide, jds, jde, kds, kde, &
&                            ims, ime, jms, jme, kms, kme, its, ite, jts&
&                            , jte, kts, kte)
      CALL POPREAL8ARRAY(rmol, (ime-ims+1)*(jme-jms+1))
      CALL A_WESELY_DRIVER(id, ktau, dtstep, config_flags, current_month&
&                     , gmt, julday, t_phy, a_t_phy, moist, a_moist, p8w&
&                     , t8w, raincv, p_phy, a_p_phy, chem, rho_phy, dz8w&
&                     , ddvel, a_ddvel, aer_res_def, a_aer_res_def, &
&                     aer_res_zcen, ivgtyp, tsk, gsw, vegfra, pbl, rmol, &
&                     a_rmol, ust, a_ust, znt, a_znt, xlat, xlong, z, &
&                     z_at_w, a_z_at_w, snowh, numgas, ids, ide, jds, jde&
&                     , kds, kde, ims, ime, jms, jme, kms, kme, its, ite&
&                     , jts, jte, kts, kte)
    END IF
    a_dep_vel = 0.0_8
  END SUBROUTINE A_DRY_DEP_VEL
END MODULE A_MODULE_DRY_DEP_VEL
