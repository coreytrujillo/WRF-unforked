!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
!  Differentiation of chem_driver in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: tracer grid%z moist chem
!   with respect to varying inputs: scalebb tracer grid%p
!                grid%t_2 grid%z grid%alt grid%v_2
!                scaleant grid%ph_2 moist grid%u_2
!                chem
!   RW status of diff variables: scalebb:in tracer:in-out grid%p:in
!                grid%t_2:in grid%z:in-out grid%alt:in
!                grid%v_2:in scaleant:in grid%ph_2:in
!                moist:in-out grid%u_2:in chem:in-out
SUBROUTINE chem_driver_tl(grid, config_flags &

#include "dummy_new_args.inc"

                 )
  USE module_domain , only : domain
  USE module_configure
  USE module_driver_constants
  USE module_machine
  USE module_tiles
  USE module_dm
  USE module_model_constants
  USE module_state_description
  USE module_data_radm2
  USE module_data_sorgam
  USE module_radm
  USE module_phot_mad
  USE module_ftuv_driver, only : ftuv_timestep_init
  USE module_data_soa_vbs, only: ldrog_vbs
  USE g_module_chem_utilities
  USE g_module_emissions_driver
  USE module_bioemi_simple
  USE module_input_tracer, only: set_tracer
  USE module_input_chem_data, only: last_chem_time, &
                                     get_last_gas,mozcart_lbc_set
  USE modal_aero_data, only: ntot_amode_cam_mam => ntot_amode
  USE module_cam_support, only: gas_pcnst => gas_pcnst_modal_aero,gas_pcnst_pos => gas_pcnst_modal_aero_pos, &
       pcnst =>pcnst_runtime, numgas_mam, cam_mam_aerosols
  IMPLICIT NONE
  interface
     SUBROUTINE sum_pm_driver ( config_flags, &
          alt, chem, h2oaj, h2oai, &
          pm2_5_dry, pm2_5_water, pm2_5_dry_ec, pm10, &
          hoa_a01,hoa_a02,hoa_a03,hoa_a04, &
          bboa_a01,bboa_a02,bboa_a03,bboa_a04, &
          soa_a01,soa_a02,soa_a03,soa_a04, &
          bbsoa_a01,bbsoa_a02,bbsoa_a03,bbsoa_a04, &
          hsoa_a01,hsoa_a02,hsoa_a03,hsoa_a04, &
          biog_a01,biog_a02,biog_a03,biog_a04, &
          asmpsoa_a01,asmpsoa_a02,asmpsoa_a03,asmpsoa_a04, &
          arosoa_a01,arosoa_a02,arosoa_a03,arosoa_a04, &
          totoa_a01,totoa_a02,totoa_a03,totoa_a04, &
          hsoa_c,hsoa_o,bbsoa_c,bbsoa_o, &
          biog_v1,biog_v2,biog_v3,biog_v4, &
          ant_v1,ant_v2,ant_v3,ant_v4, &
          smpa_v1,smpbb_v1, &
          ids,ide, jds,jde, kds,kde, &
          ims,ime, jms,jme, kms,kme, &
          its,ite, jts,jte, kts,kte )
       USE module_configure
       USE module_gocart_aerosols, only: sum_pm_gocart
       IMPLICIT NONE
       INTEGER, INTENT(IN ) :: &
            ids,ide, jds,jde, kds,kde, &
            ims,ime, jms,jme, kms,kme, &
            its,ite, jts,jte, kts,kte
       REAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_chem ), &
            INTENT(IN ) :: chem
       REAL, DIMENSION( ims:ime, kms:kme, jms:jme ), &
            INTENT(IN ) :: alt
       REAL, DIMENSION( ims:ime, kms:kme, jms:jme ), &
            OPTIONAL, &
            INTENT(IN ) :: h2oaj,h2oai
       REAL, DIMENSION( ims:ime, kms:kme, jms:jme ), &
            OPTIONAL, &
            INTENT(OUT) :: pm2_5_dry,pm2_5_water,pm2_5_dry_ec,pm10, &
            hoa_a01,hoa_a02,hoa_a03,hoa_a04, &
            bboa_a01,bboa_a02,bboa_a03,bboa_a04, &
            soa_a01,soa_a02,soa_a03,soa_a04, &
            bbsoa_a01,bbsoa_a02,bbsoa_a03,bbsoa_a04, &
            hsoa_a01,hsoa_a02,hsoa_a03,hsoa_a04, &
            biog_a01,biog_a02,biog_a03,biog_a04, &
            arosoa_a01,arosoa_a02,arosoa_a03,arosoa_a04, &
            totoa_a01,totoa_a02,totoa_a03,totoa_a04, &
            hsoa_c,hsoa_o,bbsoa_c,bbsoa_o, &
            biog_v1,biog_v2,biog_v3,biog_v4, &
            ant_v1,ant_v2,ant_v3,ant_v4, &
            smpa_v1, &
            smpbb_v1, &
            asmpsoa_a01,asmpsoa_a02,asmpsoa_a03,asmpsoa_a04
       TYPE(grid_config_rec_type), INTENT(IN ) :: config_flags
     end SUBROUTINE sum_pm_driver
  end interface
  TYPE(DOMAIN), TARGET :: grid
   !  Definitions of dummy arguments to solve
# include <dummy_new_decl.inc> 

  TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
  INTEGER :: ids, ide, jds, jde, kds, kde, ims, ime, jms, jme, kms, kme&
  , ips, ipe, jps, jpe, kps, kpe, its, ite, jts, jte, kts, kte
  INTEGER :: stepave, i, j, k, l, numgas, nv, n, nr, ktau, k_start, &
  k_end, idf, jdf, kdf
  INTEGER :: ijulian
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33) :: vcsulf_old, vcso2_old, vch2o2_old
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33, ldrog) :: vdrog3
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33, ldrog_vbs) :: vdrog3_vbs
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33) :: n2o5_het
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33) :: p_phy, u_phy, v_phy, t_phy, dz8w, t8w, p8w, rho, rri, &
  z_at_w, vvel, zmid, rh
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33) :: g_p_phy, g_u_phy, g_v_phy, g_t_phy, g_dz8w, g_t8w,    &
  g_p8w,g_rho, g_rri, g_z_at_w, g_vvel, g_zmid, g_rh
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm33:grid%em33) :: pbl_h
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm33:grid%em33, 5) :: seasin&
  , dustin
  REAL, DIMENSION(grid%sm32:grid%em32 - 1) :: ql, tl
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm33:grid%em33) :: rexnsfc, &
  factrs, tot, tsfc
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33, num_chem_ct) :: chem_old
  INTEGER, DIMENSION(num_chem_ct) :: chem_ct_indices
  TYPE(WRFU_TIMEINTERVAL) :: tmptimeinterval
  REAL(kind=8) :: curr_secs
  REAL(kind=8) :: REAL_TIME_R8
  LOGICAL :: adapt_step_flag, do_chemstep, do_photstep
  REAL :: dayi, dpl, fice, frain, hour, plyr, qi, qr, qw, radt, times, &
  wc, tdum, wmsk, rwmsk
  INTEGER :: ij
  INTEGER :: im, num_3d_m, ic, num_3d_c, num_3d_s
  INTEGER :: ijds, ijde
  INTEGER :: ksubt
  REAL :: chem_minval, dtstepc
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33, numgas_mam) :: gas_aqfrac
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33, ntot_amode_cam_mam) :: wetdens_ap
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33) :: del_h2so4_gasprod
  REAL, DIMENSION(grid%sm31:grid%em31, grid%sm32:grid%em32, grid%sm33:&
  grid%em33, gas_pcnst_pos) :: dvmrdt_sv13d, dvmrcwdt_sv13d
  LOGICAL :: haveaer
  CHARACTER(len=1000) :: msg
  CHARACTER(len=256) :: current_date_char
  INTEGER :: current_month
  REAL*8 :: result1
  REAL*8 :: result2
  INTEGER :: min7
  INTEGER :: min6
  INTEGER :: min5
  INTEGER :: min4
  INTEGER :: min3
  INTEGER :: min2
  INTEGER :: min8
  INTEGER :: min9
  INTEGER :: min10
  adapt_step_flag = .true.
  ktau = grid%itimestep
!  tmptimeinterval = DOMAIN_GET_TIME_SINCE_SIM_START(grid)
  tmpTimeInterval = domain_get_current_time ( grid ) - domain_get_sim_start_time ( grid )
  curr_secs = REAL_TIME_R8(tmptimeinterval)
  if(grid%checkpoint_interval .gt. 0) then
     write(msg,*)'ktau,check_count,checkpoint_interval = ',ktau,grid%check_count,grid%checkpoint_interval
     CALL wrf_debug(16,TRIM(msg))

!     curr_secs = curr_secs - REAL( 60*(grid%check_count-1)*grid%checkpoint_interval, 8 )
  endif
  write(msg,*)'curr_secs = ',curr_secs
  CALL wrf_debug(16,TRIM(msg))

  ijulian = IFIX(grid%julian)
  do_photstep = .false.
  IF (ktau .EQ. 1) THEN
    do_photstep = .true.
  ELSE IF (adapt_step_flag) THEN
    result1 = REAL(grid%dt, 8)
    result2 = REAL(grid%photdt*60., 8)
    IF (grid%photdt .LE. 0 .OR. curr_secs + result1 + 0.01 .GE. INT(&
        curr_secs/result2+1, 8)*result2) do_photstep = .true.
  ELSE IF (MOD(ktau, grid%stepphot) .EQ. 0 .OR. grid%stepphot .EQ. 1) &
  THEN
    do_photstep = .true.
  END IF
  IF (ktau .EQ. 1) THEN
    dtstepc = grid%dt
  ELSE
    tmptimeinterval = DOMAIN_GET_CURRENT_TIME(grid) - LAST_CHEM_TIME(grid%id)
    dtstepc = REAL(REAL_TIME_R8(tmptimeinterval), 4)
  END IF
  IF (ktau .EQ. 1) THEN
    grid%conv_ct(:, :, :, :) = 0.
    grid%chem_ct(:, :, :, :) = 0.
    grid%vmix_ct(:, :, :, :) = 0.
  END IF
  IF (config_flags%chemdiag .EQ. usechemdiag) THEN
    chem_ct_indices(p_chem_co) = p_co
    chem_ct_indices(p_chem_o3) = p_o3
    chem_ct_indices(p_chem_no) = p_no
    chem_ct_indices(p_chem_no2) = p_no2
    chem_ct_indices(p_chem_hno3) = p_hno3
    chem_ct_indices(p_chem_iso) = p_iso
    chem_ct_indices(p_chem_ho) = p_ho
    chem_ct_indices(p_chem_ho2) = p_ho2
  END IF
  do_chemstep = .false.
  IF (ktau .EQ. 1) THEN
    do_chemstep = .true.
    grid%ktauc = 1
  ELSE IF (adapt_step_flag) THEN
    result1 = REAL(grid%dt, 8)
    result2 = REAL(grid%chemdt*60., 8)
    IF (grid%chemdt .LE. 0 .OR. curr_secs + result1 + 0.01 .GE. INT(&
        curr_secs/result2+1, 8)*result2) THEN
      do_chemstep = .true.
      grid%ktauc = grid%ktauc + 1
    END IF
  ELSE IF (MOD(ktau, grid%stepchem) .EQ. 0 .OR. grid%stepchem .EQ. 1) &
  THEN
    do_chemstep = .true.
    IF (ktau/grid%stepchem .LT. 1) THEN
      grid%ktauc = 1
    ELSE
      grid%ktauc = ktau/grid%stepchem
    END IF
  END IF
  last_chem_time(grid%id) = DOMAIN_GET_CURRENT_TIME(grid)
  CALL WRFU_TIMEGET(LAST_CHEM_TIME(grid%id), yy=grid%last_chem_time_year, mm=grid%&
              last_chem_time_month, dd=grid%last_chem_time_day, h=&
              grid%last_chem_time_hour, m=grid%last_chem_time_minute&
              , s=grid%last_chem_time_second)

  CALL GET_IJK_FROM_GRID(grid, ids, ide, jds, jde, kds, kde, ims, ime, &
                   jms, jme, kms, kme, ips, ipe, jps, jpe, kps, kpe)
  CALL DOMAIN_CLOCK_GET(grid, current_timestr=current_date_char)
  READ(current_date_char(6:7), fmt='(I2)') current_month
  seasin(:, :, :) = 0.
  dustin(:, :, :) = 0.
  IF (config_flags%cu_diag .EQ. 0) grid%raincv_b(:, :) = grid%raincv(:, &
      :)
  num_3d_m = num_moist
  num_3d_c = num_chem
  num_3d_s = num_scalar
  numgas = GET_LAST_GAS(config_flags%chem_opt)
  CALL SET_TILES(grid, ids, ide, jds, jde, ips, ipe, jps, jpe)
  k_start = kps
  k_end = kpe
  IF (ids .GT. jds) THEN
    ijds = jds
  ELSE
    ijds = ids
  END IF
  IF (ide .LT. jde) THEN
    ijde = jde
  ELSE
    ijde = ide
  END IF
  chem_minval = epsilc
  SELECT CASE  (config_flags%chem_opt) 
  CASE (GOCART_SIMPLE) 
    CALL WRF_DEBUG(15, &
             'calling only gocart aerosols driver from chem_driver')
    haveaer = .false.
  CASE (GOCART_BCCO, GOCART_BC) 
    CALL WRF_DEBUG(15, &
             'calling only black carbon aerosols from chem_driver')
    haveaer = .false.
!  CASE (GOCARTRACM_KPP) 
!    CALL WRF_DEBUG(15, 'calling gocart and racm driver from chem_driver'&
!            )
!    haveaer = .false.
!  CASE (GOCARTRADM2) 
!    CALL WRF_DEBUG(15, 'calling gocart and radm driver from chem_driver'&
!            )
!    haveaer = .false.
  CASE (CHEM_TRACER, CHEM_TRACE2) 
    CALL WRF_DEBUG(15, &
          'tracer mode: only doing emissions and dry dep in chem_driver'&
            )
  CASE (CHEM_VOLC) 
    CALL WRF_DEBUG(15, 'Full Volcanic Ash mode: doing emissions (SO2 + A&
SH), settling, and subgrid transport in chem_driver')
  CASE (CHEM_VOLC_4BIN) 
    CALL WRF_DEBUG(15, '4bin Volcanic Ash mode: doing emissions (ASH), s&
ettling, and subgrid transport in chem_driver')
  CASE (CHEM_VASH) 
    CALL WRF_DEBUG(15, 'Volcanic Ash mode: only doing emissions, settlin&
g, and subgrid transport in chem_driver')
  CASE (DUST) 
    CALL WRF_DEBUG(15, 'Dust only mode: only doing emissions, settling, &
and subgrid transport chem_driver')
  CASE (CO2_TRACER, GHG_TRACER) 
    CALL WRF_DEBUG(15, &
             'Greenhouse gas mode: fluxes and transport of GHG')
  CASE DEFAULT
    IF (config_flags%tracer_opt .GT. 0) THEN
      CALL WRF_DEBUG(15, 'only doing tracer transport in chem_driver')
    ELSE
      CALL WRF_DEBUG(15, 'calling chem_opt=? from chem_driver_tl')
    END IF
  END SELECT
  SELECT CASE  (config_flags%tracer_opt) 
  CASE (TRACER_SMOKE) 
    CALL WRF_DEBUG(15, 'tracer mode: 1 tracer for fires')
  CASE (TRACER_TEST1) 
    CALL WRF_DEBUG(15, 'tracer mode: 8 tracers')
  CASE (TRACER_TEST2) 
    CALL WRF_DEBUG(15, 'tracer mode: 8 tracers')
  CASE (TRACER_TEST3) 
    CALL WRF_DEBUG(15, 'tracer mode: 10 tracers')
  CASE DEFAULT
    CALL WRF_DEBUG(15, 'calling chem_opt=? from chem_driver')
  END SELECT
  IF (((config_flags%chem_opt .EQ. cbmz_cam_mam3_noaq .OR. config_flags%&
      chem_opt .EQ. cbmz_cam_mam3_aq) .OR. config_flags%chem_opt .EQ. &
      cbmz_cam_mam7_noaq) .OR. config_flags%chem_opt .EQ. &
      cbmz_cam_mam7_aq) THEN
    grid%dgnum4d(:, :, :, :) = 0.0
    grid%dgnumwet4d(:, :, :, :) = 0.0
    wetdens_ap(:, :, :, :) = 0.0
    IF (numgas_mam .LT. numgas) THEN
      WRITE(msg, *) 'CHEM_DRIVER - NUMGAS_MAM is should be equal to numg&
as (check chemics_init.F),', ' numgas_mam=', numgas_mam, ' and numgas='&
      , numgas
      CALL WRF_ERROR_FATAL3('<stdin>', 728, msg)
    END IF
    IF (.NOT.cam_mam_aerosols) THEN
      WRITE(msg, *) 'CHEM_DRIVER - cam_mam_aerosol should be TRUE (check&
 module_physics_init.F),', ' module_cam_mam_aerosol=', cam_mam_aerosols
      CALL WRF_ERROR_FATAL3('<stdin>', 734, msg)
    END IF
  END IF
  DO nv=1,num_chem
    DO j=jps,jpe
      DO k=kps,kpe
        DO i=ips,ipe
          IF (chem(i, k, j, nv) .LT. chem_minval) THEN
            g_chem(i, k, j, nv) = 0.0_8
            chem(i, k, j, nv) = chem_minval
          ELSE
            chem(i, k, j, nv) = chem(i, k, j, nv)
          END IF
        END DO
      END DO
    END DO
  END DO
  SELECT CASE  (config_flags%chem_opt) 
  case (RADM2SORG, RADM2SORG_AQ, RADM2SORG_AQCHEM, RADM2SORG_KPP, &
        RACM_ESRLSORG_KPP,RACMSORG_AQ,RACMSORG_KPP, RACMSORG_AQCHEM_KPP, RACM_ESRLSORG_AQCHEM_KPP, &
        RACM_SOA_VBS_KPP,RACM_SOA_VBS_AQCHEM_KPP)
    DO j=jps,jpe
      DO k=kps,kpe
        DO i=ips,ipe
          IF (chem(i, k, j, p_nu0) .LT. 1.e07) THEN
            g_chem(i, k, j, p_nu0) = 0.0_8
            chem(i, k, j, p_nu0) = 1.e7
          END IF
        END DO
      END DO
    END DO
! Special treatment of CH4 in SAPRC99
  case (SAPRC99_KPP,SAPRC99_MOSAIC_4BIN_VBS2_KPP, &
       SAPRC99_MOSAIC_8BIN_VBS2_AQ_KPP,SAPRC99_MOSAIC_8BIN_VBS2_KPP) !BSINGH -  Added for SAPRC 8 bin and non-aq on (04/04/2014)
     CALL wrf_debug ( 15 , ' fixing ch4 conc using co conc' )
    DO j=jps,jpe
      DO k=kps,kpe
        DO i=ips,ipe
          g_chem(i, k, j, p_ch4) = 0.0_8
          chem(i, k, j, p_ch4) = 1.74
        END DO
      END DO
    END DO
  END SELECT
  vdrog3 = 0.
  IF (jde - 1 .GT. jpe) THEN
    min8 = jpe
    g_zmid = 0.0_8
  ELSE
    min8 = jde - 1
    g_zmid = 0.0_8
  END IF
  DO j=jps,min8
    DO k=kps,kpe
      IF (ide - 1 .GT. ipe) THEN
        min2 = ipe
      ELSE
        min2 = ide - 1
      END IF
      DO i=ips,min2
        g_vvel(i, k, j) = 0.0_8
        vvel(i, k, j) = grid%w_2(i, k, j)
!Moved these lines to after chem_prep to make zmid consistent with z_at_w for current time step -JJG
!        g_zmid(i, k, j) = grid%g_z(i, k, j)
!        zmid(i, k, j) = grid%z(i, k, j)
      END DO
    END DO
  END DO
  IF (jde - 1 .GT. jpe) THEN
    min3 = jpe
    g_rri = 0.0_8
  ELSE
    min3 = jde - 1
    g_rri = 0.0_8
  END IF
  DO j=jps,min3
    IF (kde - 1 .GT. kpe) THEN
      min4 = kpe
    ELSE
      min4 = kde - 1
    END IF
    DO k=kps,min4
      IF (ide - 1 .GT. ipe) THEN
        min5 = ipe
      ELSE
        min5 = ide - 1
      END IF
      DO i=ips,min5
        g_rri(i, k, j) = grid%g_alt(i, k, j)
        rri(i, k, j) = grid%alt(i, k, j)
      END DO
    END DO
  END DO
  IF (jde - 1 .GT. jpe) THEN
    min6 = jpe
  ELSE
    min6 = jde - 1
  END IF
  DO j=jps,min6
    IF (ide - 1 .GT. ipe) THEN
      min7 = ipe
    ELSE
      min7 = ide - 1
    END IF
    DO i=ips,min7
      pbl_h(i, j) = grid%pblh(i, j)
    END DO
  END DO
  if( config_flags%chem_opt == MOZART_KPP .or. &
      config_flags%chem_opt == MOZCART_KPP .or. &
      config_flags%chem_opt == MOZART_MOSAIC_4BIN_KPP .or. &
      config_flags%chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP) then
    IF (config_flags%phot_opt .EQ. ftuv) THEN
      CALL FTUV_TIMESTEP_INIT(grid%id, grid%julday)
    END IF
  END IF
  g_v_phy = 0.0_8
  g_t_phy = 0.0_8
  g_p_phy = 0.0_8
  g_vvel = 0.0_8
  g_u_phy = 0.0_8
  g_z_at_w = 0.0_8
  g_rho = 0.0_8
  g_dz8w = 0.0_8
  g_p8w = 0.0_8
  g_t8w = 0.0_8
  g_rh = 0.0_8

!$OMP PARALLEL DO &
!$OMP PRIVATE ( ij, its, ite, jts, jte )
DO ij=1,grid%num_tiles
    its = grid%i_start(ij)
    IF (grid%i_end(ij) .GT. ide - 1) THEN
      ite = ide - 1
    ELSE
      ite = grid%i_end(ij)
    END IF
    jts = grid%j_start(ij)
    IF (grid%j_end(ij) .GT. jde - 1) THEN
      jte = jde - 1
    ELSE
      jte = grid%j_end(ij)
    END IF
    kts = k_start
    IF (k_end .GT. kde - 1) THEN
      kte = kde - 1
    ELSE
      kte = k_end
    END IF
    CALL WRF_DEBUG(15, ' call chem_prep')

    CALL G_CHEM_PREP(config_flags, grid%u_2, grid%g_u_2, &
               grid%v_2, grid%g_v_2, grid%p, &
               grid%g_p, grid%pb, grid%alt, grid%g_alt&
               , grid%ph_2, grid%g_ph_2, grid%phb, &
               grid%t_2, grid%g_t_2, moist, g_moist, &
               num_3d_m, rho, g_rho, p_phy, g_p_phy, u_phy, g_u_phy, &
               v_phy, g_v_phy, p8w, g_p8w, t_phy, g_t_phy, t8w, g_t8w, grid%z, &
               grid%g_z, z_at_w, g_z_at_w, dz8w, g_dz8w, rh, g_rh, grid%&
               fnm, grid%fnp, ids, ide, jds, jde, kds, kde, ims, ime, &
               jms, jme, kms, kme, its, ite, jts, jte, k_start, k_end)


  END DO
!$OMP END PARALLEL DO
  IF (jde - 1 .GT. jpe) THEN
    min9 = jpe
  ELSE
    min9 = jde - 1
  END IF
  g_zmid = 0.0_8
  DO j=jps,min9
    DO k=kps,kpe
      IF (ide - 1 .GT. ipe) THEN
        min10 = ipe
      ELSE
        min10 = ide - 1
      END IF
      DO i=ips,min10
        g_zmid(i, k, j) = grid%g_z(i, k, j)
        zmid(i, k, j) = grid%z(i, k, j)
      END DO
    END DO
  END DO
!$OMP PARALLEL DO &
!$OMP PRIVATE ( ij, its, ite, jts, jte )
chem_tile_loop_1:DO ij=1,grid%num_tiles
    its = grid%i_start(ij)
    IF (grid%i_end(ij) .GT. ide - 1) THEN
      ite = ide - 1
    ELSE
      ite = grid%i_end(ij)
    END IF
    jts = grid%j_start(ij)
    IF (grid%j_end(ij) .GT. jde - 1) THEN
      jte = jde - 1
    ELSE
      jte = grid%j_end(ij)
    END IF
    kts = k_start
    IF (k_end .GT. kde - 1) THEN
      kte = kde - 1
    ELSE
      kte = k_end
    END IF
    IF (config_flags%emiss_inpt_opt .GT. 0 .OR. config_flags%dust_opt &
        .GT. 0) THEN
      CALL WRF_DEBUG(15, 'calling emissions driver')
      CALL G_EMISSIONS_DRIVER(grid%id, ktau, grid%dt, grid%dx, &
              adapt_step_flag, curr_secs,                                                  &
              grid%plumerisefire_frq,grid%stepfirepl,                                      &
              grid%bioemdt,grid%stepbioe,                                                  &
              config_flags,                                                                &
              grid%gmt,ijulian,rri,g_rri,t_phy,moist,p8w,t8w,u_phy,v_phy,vvel,             &
              grid%e_bio,p_phy,chem,g_chem,rho,g_rho,dz8w,g_dz8w,                          &
              grid%ne_area,emis_ant,emis_vol,grid%tsk,      &
              grid%erod,g,emis_seas,emis_dust,tracer,g_tracer, &
              scaleant,g_scaleant,grid%scaleant_frq,grid%stepscaleant,grid%num_ant_steps,grid%scaleant_rpt_int, &
              scalebb,g_scalebb,grid%scalebb_frq,grid%stepscalebb,grid%num_bb_steps,grid%scalebb_rpt_int,     &
              grid%check_count, grid%checkpoint_interval,                                  &
              ebu , ebu_in,grid%mean_fct_agtf,grid%mean_fct_agef,grid%mean_fct_agsv,       &
              grid%mean_fct_aggr,grid%firesize_agtf, &
              grid%firesize_agef,grid%firesize_agsv,grid%firesize_aggr,                    &
              grid%u10,grid%v10,grid%ivgtyp,grid%isltyp,grid%gsw,grid%vegfra,grid%rmol,    &
              grid%ust,grid%znt,grid%dms_0,grid%erup_beg,grid%erup_end,                    &
              grid%xland,grid%xlat,grid%xlong,                                             &
              z_at_w,zmid,grid%smois,dustin,seasin,                                        &
              grid%sebio_iso,grid%sebio_oli,grid%sebio_api,grid%sebio_lim,                 &
              grid%sebio_xyl,grid%sebio_hc3,grid%sebio_ete,grid%sebio_olt,                 &
              grid%sebio_ket,grid%sebio_ald,grid%sebio_hcho,grid%sebio_eth,                &
              grid%sebio_ora2,grid%sebio_co,grid%sebio_nr,                                 &
              grid%sebio_sesq,grid%sebio_mbo,                                              &
              grid%noag_grow,grid%noag_nongrow,grid%nononag,grid%slai,                     &
              grid%ebio_iso,grid%ebio_oli,grid%ebio_api,grid%ebio_lim,grid%ebio_xyl,       &
              grid%ebio_hc3,grid%ebio_ete,grid%ebio_olt,grid%ebio_ket,grid%ebio_ald,       &
              grid%ebio_hcho,grid%ebio_eth,grid%ebio_ora2,grid%ebio_co,grid%ebio_nr,       &
              grid%ebio_no,grid%ebio_sesq,grid%ebio_mbo,                                   &
              grid%ebio_c10h16,grid%ebio_tol,grid%ebio_bigalk,                             &
              grid%ebio_ch3oh,grid%ebio_acet,grid%ebio_nh3,grid%ebio_no2,                  &
              grid%ebio_c2h5oh,grid%ebio_ch3cooh,grid%ebio_mek,grid%ebio_bigene,           &
              grid%ebio_c2h6,grid%ebio_c2h4,grid%ebio_c3h6,grid%ebio_c3h8,grid%ebio_so2,   &
              grid%ebio_dms,                                                               &
              grid%ebio_alk3, grid%ebio_alk4, grid%ebio_alk5, grid%ebio_ole1, grid%ebio_ole2,            &    
              grid%ebio_aro1, grid%ebio_aro2, grid%ebio_ccho, grid%ebio_meoh,             &    
              grid%ebio_ethene, grid%ebio_hcooh, grid%ebio_terp, grid%ebio_bald,          &    
              grid%ebio_cco_oh, grid%ebio_rco_oh,                                         &    
              grid%clayfrac,grid%sandfrac,grid%dust_alpha,grid%dust_gamma,grid%dust_smtune,&
              grid%snowh,grid%zs,                                                          &
              grid%T2,grid%swdown,                                                         &
              grid%nmegan,grid%EFmegan,                                                    &
              grid%msebio_isop,                                                            &
              grid%mlai,                                                                   &
              grid%pftp_bt, grid%pftp_nt, grid%pftp_sb, grid%pftp_hb,                      &
              grid%mtsa,                                                                   &
              grid%mswdown,                                                                &
              grid%mebio_isop,grid%mebio_apin,grid%mebio_bpin, grid%mebio_bcar,            &
              grid%mebio_acet,grid%mebio_mbo,grid%mebio_no,                                &
              current_month,                                                               &
         ! stuff for LNOx emissions
             grid%ht, grid%refl_10cm, grid%ic_flashrate, grid%cg_flashrate,                 &
         ! stuff for aircraft emissions
              emis_aircraft,                                                               &
         ! stuff for the GHG fluxes
              vprm_in,grid%rad_vprm,grid%lambda_vprm,                                      &
              grid%alpha_vprm,grid%resp_vprm,grid%xtime,                                   &
              grid%TSLB, wet_in,grid%RAINC,grid%RAINNC,                                    &
              grid%potevp,grid%SFCEVP,grid%LU_INDEX,                                       &
              grid%biomt_par,grid%emit_par,grid%ebio_co2oce,                               &
              eghg_bio,                                                                    &

              ids,ide, jds,jde, kds,kde,                                                   &
              ims,ime, jms,jme, kms,kme,                                                   &
              its,ite,jts,jte,kts,kte)



    END IF
    IF ( do_chemstep .and.                           &
          config_flags%chem_opt /= CHEM_TRACER .and. &
          config_flags%chem_opt /= CHEM_VASH .and. &
          config_flags%chem_opt /= CHEM_VOLC .and. &
          config_flags%chem_opt /= CHEM_VOLC_4BIN .and. &
          config_flags%chem_opt /= DUST .and. &
          config_flags%chem_opt /= CHEM_TRACE2 .and. &
          config_flags%chem_opt /= CO2_TRACER  .and. &
          config_flags%chem_opt /= GHG_TRACER ) THEN
      DO nv=param_first_scalar,num_chem_ct
        chem_old(its:ite, kts:kte, jts:jte, nv) = chem(its:ite, kts:kte&
          , jts:jte, chem_ct_indices(nv))
      END DO
      IF (cam_mam_aerosols) del_h2so4_gasprod(:, :, :) = chem(:, :, :, &
          p_sulf)
      IF (config_flags%gaschem_onoff .GT. 0) THEN
         CALL G_MECHANISM_DRIVER(grid%id,curr_secs,ktau,grid%dt,grid%ktauc,dtstepc,config_flags, &
              grid%gmt,ijulian,t_phy,g_t_phy,moist,p8w,t8w,grid%gd_cldfr,                 &
              p_phy,chem,g_chem,rho,g_rho,dz8w,grid%dx,g,                                          &
              zmid,z_at_w,grid%xlat,grid%xlong,                                       &
              vdrog3,vcsulf_old,vcso2_old,vch2o2_old,grid%ttday,grid%tcosz,           &
              grid%ph_macr,grid%ph_o31d,grid%ph_o33p,grid%ph_no2,grid%ph_no3o2,       &
              grid%ph_no3o,grid%ph_hno2,grid%ph_hno3,grid%ph_hno4,grid%ph_h2o2,       &
              grid%ph_ch2or,grid%ph_ch2om,grid%ph_ch3cho,grid%ph_ch3coch3,            &
              grid%ph_ch3coc2h5,grid%ph_hcocho,grid%ph_ch3cocho,grid%ph_hcochest,     &
              grid%ph_ch3o2h,grid%ph_ch3coo2h,grid%ph_ch3ono2,grid%ph_hcochob,        &
              grid%ph_n2o5,grid%ph_o2,grid%backg_oh,grid%backg_h2o2,grid%backg_no3,   &
              grid%addt,grid%addx,grid%addc,grid%etep,                                &
              grid%oltp,grid%olip,grid%cslp,grid%limp,grid%hc5p,grid%hc8p,grid%tolp,  &
              grid%xylp,grid%apip,grid%isop,grid%hc3p,grid%ethp,grid%o3p,grid%tco3,   &
              grid%mo2,grid%o1d,grid%olnn,grid%rpho,grid%xo2,                         &
              grid%ketp,grid%olnd,                                                    &
              ids,ide, jds,jde, kds,kde,                                              &
              ims,ime, jms,jme, kms,kme,                                              &
              its,ite,jts,jte,kts,kte        )
      END IF

      DO nv=param_first_scalar,num_chem_ct
        grid%chem_ct(its:ite, kts:kte, jts:jte, nv) = grid%chem_ct(its:&
          ite, kts:kte, jts:jte, nv) + (chem(its:ite, kts:kte, jts:jte, &
          chem_ct_indices(nv))-chem_old(its:ite, kts:kte, jts:jte, nv))
      END DO
      IF (config_flags%aerchem_onoff .GT. 0) THEN
         CALL G_AEROSOLS_DRIVER(grid%id,curr_secs,ktau,grid%dt,grid%ktauc,              &
             config_flags,dtstepc,grid%dx,                                            &
              rri,t_phy,moist,grid%aerwrf,p8w,t8w,                                    &
              p_phy,chem,g_chem,rho,dz8w, rh,                                                & 
              zmid,z_at_w,pbl_h,grid%cldfra,grid%cldfra_mp_all,grid%vbs_nbin,         &
              grid%h2oaj,grid%h2oai,grid%nu3,grid%ac3,grid%cor3,grid%asulf,           &
              grid%ahno3,grid%anh3,grid%cvaro1,grid%cvaro2,grid%cvalk1,grid%cvole1,   &
              grid%cvapi1,grid%cvapi2,grid%cvlim1,grid%cvlim2,vcsulf_old,             &
              vdrog3,vdrog3_vbs,grid%br_rto,grid%dgnum4d,grid%dgnumwet4d,wetdens_ap,  &
              del_h2so4_gasprod,grid%dvmrdt_sv13d,grid%dvmrcwdt_sv13d,                &
              grid%is_CAMMGMP_used,                                                   &!BSINGH:01/31/2013: Added is_CAMMGMP_used for cam_mam_aerchem_driver
              ids,ide, jds,jde, kds,kde,                                              &
              ims,ime, jms,jme, kms,kme,                                              &
              its,ite,jts,jte,kts,kte                                                 )
       END IF
    END IF
    CALL G_SUM_PM_DRIVER ( config_flags,                                              &
         rri, g_rri, chem, g_chem, grid%h2oaj, grid%h2oai,                          &
         grid%pm2_5_dry, grid%g_pm2_5_dry, grid%pm2_5_water,                        &
         grid%pm2_5_dry_ec, grid%g_pm2_5_dry_ec, grid%pm10, grid%g_pm10,            &
         grid% hoa_a01,grid%hoa_a02,grid%hoa_a03,grid%hoa_a04,                      &
         grid%bboa_a01,grid%bboa_a02,grid%bboa_a03,grid%bboa_a04,                   &
         grid%soa_a01,grid%soa_a02,grid%soa_a03,grid%soa_a04,                       &
         grid%bbsoa_a01,grid%bbsoa_a02,grid%bbsoa_a03,grid%bbsoa_a04,               &
         grid%hsoa_a01,grid%hsoa_a02,grid%hsoa_a03,grid%hsoa_a04,                   &
         grid%biog_a01,grid%biog_a02,grid%biog_a03,grid%biog_a04,                   &
         grid%asmpsoa_a01,grid%asmpsoa_a02,grid%asmpsoa_a03,grid%asmpsoa_a04,                   &
         grid%arosoa_a01,grid%arosoa_a02,grid%arosoa_a03,grid%arosoa_a04,           &
         grid%totoa_a01,grid%totoa_a02,grid%totoa_a03,grid%totoa_a04,               &
         grid%hsoa_c,grid%hsoa_o,grid%bbsoa_c,grid%bbsoa_o,                         &
         grid%biog_v1,grid%biog_v2,grid%biog_v3,grid%biog_v4,                       &
         grid%ant_v1,grid%ant_v2,grid%ant_v3,grid%ant_v4,                           &
         grid%smpa_v1,grid%smpbb_v1,                           &
           ids,ide, jds,jde, kds,kde,                                               &
           ims,ime, jms,jme, kms,kme,                                               &
           its,ite, jts,jte, kts,kte             )
    DO nv=1,num_chem
      DO j=jts,jte
        DO i=its,ite
          g_chem(i, k_end, j, nv) = g_chem(i, kte, j, nv)
          chem(i, k_end, j, nv) = chem(i, kte, j, nv)
        END DO
      END DO
    END DO
    CALL WRF_DEBUG(15, 'done tileloop in chem_driver')
  END DO chem_tile_loop_1
END SUBROUTINE chem_driver_tl
