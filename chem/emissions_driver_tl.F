!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.6 (r4756) - 12 Feb 2013 10:43
!
MODULE g_module_emissions_driver
  IMPLICIT NONE

CONTAINS
!  Differentiation of emissions_driver in forward (tangent) mode (with options r8 noISIZE):
!   variations   of useful results: tracer chem
!   with respect to varying inputs: scalebb tracer scaleant alt
!                rho_phy chem dz8w
!   RW status of diff variables: scalebb:in tracer:in-out scaleant:in
!                alt:in rho_phy:in chem:in-out dz8w:in
  SUBROUTINE g_emissions_driver(id, ktau, dtstep, dx, adapt_step_flag, &
&    curr_secs, plumerisefire_frq, stepfirepl, bioemdt, stepbioe, &
&    config_flags, gmt, julday, alt, g_alt, t_phy, moist, p8w, t8w, u_phy&
&    , v_phy, vvel, e_bio, p_phy, chem, g_chem, rho_phy, g_rho_phy, dz8w&
&    , g_dz8w, ne_area, emis_ant, emis_vol, tsk, erod, g, emis_seas, &
&    emis_dust, tracer, g_tracer, scaleant, g_scaleant, scaleant_frq, &
&    stepscaleant, num_ant_steps, scaleant_rpt_int, scalebb, g_scalebb, scalebb_frq, &
&    stepscalebb, num_bb_steps, scalebb_rpt_int, check_count, checkpoint_interval,  &
&    ebu, ebu_in, mean_fct_agtf, mean_fct_agef,                    &
&    mean_fct_agsv, mean_fct_aggr, firesize_agtf, firesize_agef, &
&    firesize_agsv, firesize_aggr, u10, v10, ivgtyp, isltyp, gsw, vegfra&
&    , rmol, ust, znt, dms_0, erup_beg, erup_end, xland, xlat, xlong, &
&    z_at_w, z, smois, dustin, seasin, sebio_iso, sebio_oli, sebio_api, &
&    sebio_lim, sebio_xyl, sebio_hc3, sebio_ete, sebio_olt, sebio_ket, &
&    sebio_ald, sebio_hcho, sebio_eth, sebio_ora2, sebio_co, sebio_nr, &
&    sebio_sesq, sebio_mbo, noag_grow, noag_nongrow, nononag, slai, &
&    ebio_iso, ebio_oli, ebio_api, ebio_lim, ebio_xyl, ebio_hc3, ebio_ete&
&    , ebio_olt, ebio_ket, ebio_ald, ebio_hcho, ebio_eth, ebio_ora2, &
&    ebio_co, ebio_nr, ebio_no, ebio_sesq, ebio_mbo, ebio_c10h16, &
&    ebio_tol, ebio_bigalk, ebio_ch3oh, ebio_acet, ebio_nh3, ebio_no2, &
&    ebio_c2h5oh, ebio_ch3cooh, ebio_mek, ebio_bigene, ebio_c2h6, &
&    ebio_c2h4, ebio_c3h6, ebio_c3h8, ebio_so2, ebio_dms, ebio_alk3, &
&    ebio_alk4, ebio_alk5, ebio_ole1, ebio_ole2, ebio_aro1, ebio_aro2, &
&    ebio_ccho, ebio_meoh, ebio_ethene, ebio_hcooh, ebio_terp, ebio_bald&
&    , ebio_cco_oh, ebio_rco_oh, clayfrac, sandfrac, dust_alpha, &
&    dust_gamma, dust_smtune, snowh, zs, t2, swdown, nmegan, efmegan, &
&    msebio_isop, mlai, pftp_bt, pftp_nt, pftp_sb, pftp_hb, mtsa, mswdown&
&    , mebio_isop, mebio_apin, mebio_bpin, mebio_bcar, mebio_acet, &
&    mebio_mbo, mebio_no, current_month, ht, refl_10cm, ic_flashrate, &
&    cg_flashrate, emis_aircraft, vprm_in, rad_vprm, lambda_vprm, &
&    alpha_vprm, resp_vprm, xtime, tslb, wet_in, rainc, rainnc, potevp, &
&    sfcevp, lu_index, biomt_par, emit_par, ebio_co2oce, eghg_bio, ids, &
&    ide, jds, jde, kds, kde, ims, ime, jms, jme, kms, kme, its, ite, jts&
&    , jte, kts, kte)
    USE module_configure
    USE module_state_description
    USE module_data_radm2
    USE module_data_sorgam, only : mw_so4_aer,anthfac,factnumn,factnuma,factnumc
    USE module_model_constants, only : mwdry
    USE g_module_emissions_anthropogenics
    USE g_module_add_emiss_burn
    USE module_plumerise1

    IMPLICIT NONE
    TYPE(GRID_CONFIG_REC_TYPE), INTENT(IN) :: config_flags
    INTEGER, INTENT(IN) :: id, julday, ne_area, ids, ide, jds, jde, kds&
&    , kde, ims, ime, jms, jme, kms, kme, its, ite, jts, jte, kts, kte
    INTEGER, INTENT(IN) :: ktau, stepbioe, stepfirepl
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_moist), INTENT(IN) ::&
&    moist
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_chem), INTENT(INOUT) &
&    :: g_chem
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_tracer), INTENT(INOUT&
&    ) :: tracer
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_tracer), INTENT(INOUT&
&    ) :: g_tracer
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_ebu), INTENT(INOUT) &
&    :: ebu
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_ebu_in), INTENT(INOUT) :: &
&    ebu_in
    REAL, DIMENSION(ims:ime, jms:jme, ne_area), INTENT(INOUT) :: e_bio
    REAL, DIMENSION(ims:ime, config_flags%kemit, jms:jme, num_emis_ant),&
&    INTENT(IN) :: emis_ant
    INTEGER, INTENT(IN) :: scaleant_frq, scalebb_frq, stepscaleant, &
&    stepscalebb, num_ant_steps, num_bb_steps, &
&    scaleant_rpt_int, scalebb_rpt_int, check_count, checkpoint_interval
    REAL, DIMENSION(ims:ime, num_ant_steps, jms:jme, num_scaleant), &
&    INTENT(IN) :: scaleant
    REAL, DIMENSION(ims:ime, num_ant_steps, jms:jme, num_scaleant), &
&    INTENT(IN) :: g_scaleant
    REAL, DIMENSION(ims:ime, num_bb_steps, jms:jme, num_scalebb), &
&    INTENT(IN) :: scalebb
    REAL, DIMENSION(ims:ime, num_bb_steps, jms:jme, num_scalebb), &
&    INTENT(IN) :: g_scalebb
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme, num_emis_vol), INTENT(&
&    INOUT) :: emis_vol
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: dms_0, tsk, &
&    erup_beg, erup_end
    REAL, DIMENSION(ims:ime, jms:jme, 3), INTENT(IN) :: erod
    REAL, DIMENSION(ims:ime, jms:jme, 5), INTENT(INOUT) :: dustin, &
&    seasin
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_emis_dust), OPTIONAL, &
&    INTENT(INOUT) :: emis_dust
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_emis_seas), OPTIONAL, &
&    INTENT(INOUT) :: emis_seas
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(IN) :: &
&    mean_fct_agtf, mean_fct_agef, mean_fct_agsv, mean_fct_aggr, &
&    firesize_agtf, firesize_agef, firesize_agsv, firesize_aggr
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: alt, t_phy&
&    , p_phy, dz8w, t8w, p8w, z_at_w, z, u_phy, v_phy, vvel, rho_phy
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: g_alt, &
&    g_dz8w, g_rho_phy
    INTEGER, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: ivgtyp, isltyp
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: u10, v10, gsw, &
&    vegfra, rmol, ust, xland, xlat, xlong, znt, rainc, rainnc, potevp, &
&    sfcevp, lu_index
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(IN) :: clayfrac&
&    , sandfrac, snowh
    REAL, INTENT(IN) :: dust_alpha, dust_gamma, dust_smtune
    REAL, DIMENSION(config_flags%num_soil_layers), INTENT(IN) :: zs
    REAL, DIMENSION(ims:ime, config_flags%num_soil_layers, jms:jme), &
&    INTENT(INOUT) :: smois, tslb
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(INOUT) :: &
&    sebio_iso, sebio_oli, sebio_api, sebio_lim, sebio_xyl, sebio_hc3, &
&    sebio_ete, sebio_olt, sebio_ket, sebio_ald, sebio_hcho, sebio_eth, &
&    sebio_ora2, sebio_co, sebio_nr, sebio_sesq, sebio_mbo, noag_grow, &
&    noag_nongrow, nononag, slai, ebio_iso, ebio_oli, ebio_api, ebio_lim&
&    , ebio_xyl, ebio_hc3, ebio_ete, ebio_olt, ebio_ket, ebio_ald, &
&    ebio_hcho, ebio_eth, ebio_ora2, ebio_co, ebio_nr, ebio_no, ebio_sesq&
&    , ebio_mbo, ebio_c10h16, ebio_tol, ebio_bigalk, ebio_ch3oh, &
&    ebio_acet, ebio_nh3, ebio_no2, ebio_c2h5oh, ebio_ch3cooh, ebio_mek, &
&    ebio_bigene, ebio_c2h6, ebio_c2h4, ebio_c3h6, ebio_c3h8, ebio_so2, &
&    ebio_dms, ebio_co2oce, ebio_alk3, ebio_alk4, ebio_alk5, ebio_ole1, &
&    ebio_ole2, ebio_aro1, ebio_aro2, ebio_ccho, ebio_meoh, ebio_ethene, &
&    ebio_hcooh, ebio_terp, ebio_bald, ebio_cco_oh, ebio_rco_oh
    INTEGER, INTENT(IN) :: nmegan
    REAL, DIMENSION(ims:ime, jms:jme, nmegan), OPTIONAL, INTENT(INOUT) &
&    :: efmegan
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(IN) :: &
&    msebio_isop, pftp_bt, pftp_nt, pftp_sb, pftp_hb
    REAL, DIMENSION(ims:ime, jms:jme, 12), OPTIONAL, INTENT(IN) :: mlai&
&    , mtsa, mswdown
    REAL, DIMENSION(ims:ime, jms:jme), OPTIONAL, INTENT(INOUT) :: &
&    mebio_isop, mebio_apin, mebio_bpin, mebio_bcar, mebio_acet, &
&    mebio_mbo, mebio_no
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: t2, swdown
    INTEGER, INTENT(IN) :: current_month
    REAL(kind=8), INTENT(IN) :: curr_secs
    REAL :: gmtp, gmtm
    INTEGER :: curr_hours, ivolcano
    INTEGER :: endhr, endmin, beghr, begmin, ko, kk4, kl, k_initial, &
&    k_final
    REAL :: emiss_ash_mass, emiss_ash_height, so2_mass, vert_mass_dist(&
&    kts:kte)
    REAL :: eh
    REAL :: area, x1, percen_mass_umbrel, base_umbrel, ashz_above_vent
    REAL, INTENT(IN) :: bioemdt, dtstep, dx, gmt, g
    INTEGER, INTENT(IN) :: plumerisefire_frq
    LOGICAL, INTENT(IN) :: adapt_step_flag
    REAL, DIMENSION(ims:ime, config_flags%kemit_aircraft, jms:jme, &
&    num_emis_aircraft), OPTIONAL, INTENT(IN) :: emis_aircraft
    REAL, DIMENSION(ims:ime, 8, jms:jme, num_vprm_in), INTENT(IN) :: &
&    vprm_in
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_eghg_bio), INTENT(INOUT) ::&
&    eghg_bio
    REAL, DIMENSION(8) :: rad_vprm, lambda_vprm, alpha_vprm, resp_vprm
    REAL, DIMENSION(14), INTENT(IN) :: biomt_par, emit_par
    REAL, DIMENSION(ims:ime, 1, jms:jme, num_wet_in), INTENT(IN) :: &
&    wet_in
    REAL, INTENT(IN) :: xtime
    REAL, DIMENSION(ims:ime, jms:jme), INTENT(IN) :: ht, ic_flashrate, &
&    cg_flashrate
    REAL, DIMENSION(ims:ime, kms:kme, jms:jme), INTENT(IN) :: refl_10cm
    INTEGER :: begday, endday, i, j, k, ksub, dust_emiss_active, &
&    seasalt_emiss_active, emiss_ash_hgt
    REAL :: conv, conv3, conv4, oconv3, oconv4
    REAL :: g_conv
    CHARACTER*256 :: message
    LOGICAL :: do_bioemiss, do_plumerisefire, do_ex_volcanoe
    INTEGER :: iant, ibb
    REAL*8 :: result1
    REAL*8 :: result2
    REAL*8 :: result3
    INTEGER :: min4
    INTEGER :: min3
    INTEGER :: min2
    INTEGER :: min5
    percen_mass_umbrel = .75
    base_umbrel = .25
    ivolcano = 0
    area = dx*dx
    dust_emiss_active = 0
    seasalt_emiss_active = 0
    IF (config_flags%dust_opt .GE. 2) dust_emiss_active = 1
    IF (config_flags%seas_opt .EQ. 2) seasalt_emiss_active = 1
    gmtp = curr_secs/3600.
    curr_hours = curr_secs/3600.
    gmtp = MOD(gmt + gmtp, 24.)
    gmtm = MOD(gmtp, 60.)
    do_plumerisefire = .false.
    IF ( config_flags%biomass_burn_opt .EQ. BIOMASSB_MOZC .OR. &
&        config_flags%biomass_burn_opt .EQ. BIOMASSB_MOZ .OR. &
&        config_flags%biomass_burn_opt .EQ. BIOMASSB_GHG .OR. &
&        config_flags%biomass_burn_opt .EQ. BIOMASSB .OR. &
&        config_flags%biomass_burn_opt .EQ. ADTLBB .OR. &
&        config_flags%biomass_burn_opt .EQ. ADTLBB_BCCO .OR. &
&        config_flags%biomass_burn_opt .EQ. ADTLBB_BC &
&      ) THEN

      IF (ktau .EQ. 1) THEN
        do_plumerisefire = .true.
      ELSE IF (adapt_step_flag) THEN
        result1 = REAL(dtstep, 8)
        result2 = REAL(plumerisefire_frq*60., 8)
!        IF (plumerisefire_frq .LE. 0 .OR. curr_secs + result1 + 0.01 &
!&            .GE. INT(curr_secs/result2+1, 8)*result2) do_plumerisefire&
        IF (plumerisefire_frq .LE. 0 .OR. curr_secs + 0.01 &
&            .GE. FLOOR( (curr_secs - result1) /real(plumerisefire_frq*60.,8)+1.0D0 )*real(plumerisefire_frq*60.,8)) &
            do_plumerisefire = .true.
      ELSE IF (MOD(ktau, stepfirepl) .EQ. 0 .OR. stepfirepl .EQ. 1) THEN
        do_plumerisefire = .true.
      END IF
    END IF
    do_bioemiss = .false.
    IF (ktau .EQ. 1) THEN
      do_bioemiss = .true.
    ELSE IF (adapt_step_flag) THEN
      result1 = REAL(dtstep, 8)
      result2 = REAL(bioemdt*60., 8)
      result3 = REAL(bioemdt*60., 8)
      IF (bioemdt .LE. 0 .OR. curr_secs + result1 + 0.01 .GE. INT(&
&          curr_secs/result2+1, 8)*result3) do_bioemiss = .true.
    ELSE IF (MOD(ktau, stepbioe) .EQ. 0 .OR. stepbioe .EQ. 1) THEN
      do_bioemiss = .true.
    END IF
    iant = 1
    IF (stepscaleant .GT. 0) THEN
      IF (ktau .EQ. 1) THEN
        iant = 1
      ELSE IF (adapt_step_flag) THEN
        result1 = REAL(scaleant_frq*60., 8)
        iant = ABS( INT(curr_secs/result1 + 1.0, 8) )
      ELSE
        DO k=2,ktau
          IF (MOD(k, stepscaleant) .EQ. 0 .OR. stepscaleant .EQ. 1) iant&
&             = iant + 1
        END DO
      END IF
      IF ( check_count .gt. 1 ) then
         iant=iant+(check_count-1)*checkpoint_interval/scaleant_frq
      ENDIF
      IF ( scaleant_rpt_int .gt. 0 ) iant = mod(iant-1 , scaleant_rpt_int) + 1
    END IF
    IF (iant .GT. num_ant_steps .OR. iant .LE. 0) THEN
      WRITE(message, *) &
&      'emissions_driver: need to increase num_ant_steps, ktau,iant = ', ktau,iant
      CALL wrf_error_fatal( trim(message) )
    END IF
    ibb = 1
    IF (stepscalebb .GT. 0) THEN
      IF (ktau .EQ. 1) THEN
        ibb = 1
      ELSE IF (adapt_step_flag) THEN
        result1 = REAL(scalebb_frq*60., 8)
        ibb = ABS( INT(curr_secs/result1 + 1.0, 8) )
      ELSE
        DO k=2,ktau
          IF (MOD(k, stepscalebb) .EQ. 0 .OR. stepscalebb .EQ. 1) ibb = &
&              ibb + 1
        END DO
      END IF
      IF ( check_count .gt. 1 ) then
         ibb=ibb+(check_count-1)*checkpoint_interval/scalebb_frq
      ENDIF
      IF ( scalebb_rpt_int .gt. 0 ) ibb = mod(ibb-1 , scalebb_rpt_int) + 1
    END IF
    IF (ibb .GT. num_bb_steps .OR. ibb .LE. 0) THEN
      WRITE(message, *) &
&      'emissions_driver: need to increase num_bb_steps, ktau,ibb = ', ktau,ibb
      CALL wrf_error_fatal( trim(message) )
    END IF
    WRITE(message, *) 'chem_driver_ad, iant,ibb,curr_secs,ktau = ',iant,ibb,curr_secs,ktau
    CALL wrf_debug( 16, TRIM(message) )
    IF (do_plumerisefire) THEN
      CALL WRF_DEBUG(15, 'fire emissions: calling plumerise')
      WRITE(0, *) ktau, stepfirepl
      CALL PLUMERISE_DRIVER(id, ktau, dtstep, ebu, ebu_in, mean_fct_agtf&
&                      , mean_fct_agef, mean_fct_agsv, mean_fct_aggr, &
&                      firesize_agtf, firesize_agef, firesize_agsv, &
&                      firesize_aggr, config_flags, t_phy, moist, rho_phy&
&                      , vvel, u_phy, v_phy, p_phy, emis_ant, z_at_w, z, &
&                      config_flags%scale_fire_emiss, ids, ide, jds, jde&
&                      , kds, kde, ims, ime, jms, jme, kms, kme, its, ite&
&                      , jts, jte, kts, kte)
    END IF
    SELECT CASE  (config_flags%tracer_opt) 
    CASE (TRACER_SMOKE, TRACER_TEST2) 
      CALL WRF_DEBUG(15, &
&               'tracer fire emissions: calling biomassb, only CO')
      CALL G_ADD_EMIS_BURN(id, dtstep, ktau, dz8w, g_dz8w, rho_phy, &
&                     g_rho_phy, tracer, g_tracer, julday, gmt, xlat, &
&                     xlong, t_phy, p_phy, ebu, 0, config_flags%&
&                     tracer_opt, config_flags%biomass_burn_opt, scalebb(&
&                     :, ibb, :, :), g_scalebb(:, ibb, :, :), &
&                     config_flags%scale_burn_opt, num_tracer, ids, ide, &
&                     jds, jde, kds, kde, ims, ime, jms, jme, kms, kme, &
&                     its, ite, jts, jte, kts, kte)
!    CASE DEFAULT
!      CALL WRF_DEBUG(15, 'No tracer option selected')
    END SELECT
    ksub = 0
    SELECT CASE  (config_flags%biomass_burn_opt) 
    CASE (BIOMASSB, BIOMASSB_MOZC, BIOMASSB_MOZ, BIOMASSB_GHG, &
&    ADTLBB, ADTLBB_BCCO, ADTLBB_BC)
      CALL WRF_DEBUG(15, 'fire emissions: adding biomassb emissions')
      CALL G_ADD_EMIS_BURN(id, dtstep, ktau, dz8w, g_dz8w, rho_phy, &
&                     g_rho_phy, chem, g_chem, julday, gmt, xlat, xlong, &
&                     t_phy, p_phy, ebu, config_flags%chem_opt, 0, &
&                     config_flags%biomass_burn_opt, scalebb(:, ibb, :, :&
&                     ), g_scalebb(:, ibb, :, :), config_flags%&
&                     scale_burn_opt, num_chem, ids, ide, jds, jde, kds, &
&                     kde, ims, ime, jms, jme, kms, kme, its, ite, jts, &
&                     jte, kts, kte)
    CASE DEFAULT
      CALL WRF_DEBUG(15, 'no biomass burning')
    END SELECT
    IF (config_flags%scale_emiss_opt .NE. config_flags%emiss_opt) CALL &
&      WRF_ERROR_FATAL3('<stdin>', 471, &
&                 'emissions_driver: scale_emiss_opt /= emiss_opt')
    SELECT CASE  (config_flags%chem_opt) 
    CASE (GOCARTRACM_KPP, GOCARTRADM2) 
      IF (config_flags%emiss_inpt_opt .NE. 3) THEN
        IF (config_flags%kemit .GT. kte - ksub) THEN
          k = config_flags%kemit
          WRITE(message, &
&          '(" WARNING: EMISSIONS_DRIVER: KEMIT > KTE ",3i6)') kme, kte -&
&          ksub, k
          CALL WRF_MESSAGE(message)
        END IF
        CALL WRF_DEBUG(15, 'emissions_driver calling add_anthropogenics'&
&                )
        CALL G_ADD_ANTHROPOGENICS(id, dtstep, dz8w, g_dz8w, config_flags&
&                            , rho_phy, g_rho_phy, alt, g_alt, chem, &
&                            g_chem, emis_ant, emis_aircraft, scaleant(:&
&                            , iant, :, :), g_scaleant(:, iant, :, :), &
&                            ids, ide, jds, jde, kds, kde, ims, ime, jms&
&                            , jme, kms, kme, its, ite, jts, jte, kts, &
&                            kte)
!        CALL WRF_DEBUG(15, 'emissions_driver calling add_biogenics')
      END IF
      DO j=jts,jte
        DO i=its,ite
          IF (config_flags%kemit .GT. kte - ksub) THEN
            min5 = kte - ksub
          ELSE
            min5 = config_flags%kemit
          END IF
          DO k=kts,min5
            conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.)
            g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (dtstep*((&
&              emis_ant(i, k, j, p_e_eci)*g_scaleant(i, iant, j, &
&              p_scant_eci)+emis_ant(i, k, j, p_e_ecj)*g_scaleant(i,  &
&              iant, j, p_scant_ecj))*alt(i, k, j)+(emis_ant(i, k, j, &
&              p_e_eci)*scaleant(i, iant, j, p_scant_eci)+emis_ant(i, k, &
&              j, p_e_ecj)*scaleant(i, iant, j, p_scant_ecj))*g_alt(i, k&
&              , j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_eci)*scaleant(i&
&              , iant, j, p_scant_eci)+emis_ant(i, k, j, p_e_ecj)*&
&              scaleant(i, iant, j, p_scant_ecj))*alt(i, k, j)*dtstep*&
&              g_dz8w(i, k, j))/dz8w(i, k, j)**2
            chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + (emis_ant(i, k&
&              , j, p_e_eci)*scaleant(i, iant, j, p_scant_eci)+emis_ant(i&
&              , k, j, p_e_ecj)*scaleant(i, iant, j, p_scant_ecj))*alt(i&
&              , k, j)*dtstep/dz8w(i, k, j)
            g_chem(i, k, j, p_oc1) = g_chem(i, k, j, p_oc1) + (dtstep*((&
&              emis_ant(i, k, j, p_e_orgj)*g_scaleant(i, iant, j, &
&              p_scant_orgj)+emis_ant(i, k, j, p_e_orgi)*g_scaleant(i,&
&               iant, j, p_scant_orgi))*alt(i, k, j)+(emis_ant(i, k, j, &
&              p_e_orgj)*scaleant(i, iant, j, p_scant_orgj)+emis_ant(i, k&
&              , j, p_e_orgi)*scaleant(i, iant, j, p_scant_orgi))*g_alt(i&
&              , k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_orgj)*&
&              scaleant(i, iant, j, p_scant_orgj)+emis_ant(i, k, j, &
&              p_e_orgi)*scaleant(i, iant, j, p_scant_orgi))*alt(i, k, j)&
&              *dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
            chem(i, k, j, p_oc1) = chem(i, k, j, p_oc1) + (emis_ant(i, k&
&              , j, p_e_orgj)*scaleant(i, iant, j, p_scant_orgj)+emis_ant&
&              (i, k, j, p_e_orgi)*scaleant(i, iant, j, p_scant_orgi))*&
&              alt(i, k, j)*dtstep/dz8w(i, k, j)
            g_chem(i, k, j, p_p25) = g_chem(i, k, j, p_p25) + (dtstep*((&
&              emis_ant(i, k, j, p_e_pm25j)*g_scaleant(i, iant, j, &
&              p_scant_pm25j)+emis_ant(i, k, j, p_e_pm25i)*g_scaleant(i, &
&              iant, j, p_scant_pm25i)+emis_ant(i, k, j, p_e_no3j)*&
&              g_scaleant(i, iant, j, p_scant_no3j)+emis_ant(i, k, j, &
&              p_e_no3i)*g_scaleant(i, iant, j, p_scant_no3i))*alt(i, k, &
&              j)+(emis_ant(i, k, j, p_e_pm25j)*scaleant(i, iant, j, &
&              p_scant_pm25j)+emis_ant(i, k, j, p_e_pm25i)*scaleant(i,&
&               iant, j, p_scant_pm25i)+emis_ant(i, k, j, p_e_no3j)*&
&              scaleant(i, iant, j, p_scant_no3j)+emis_ant(i, k, j, &
&              p_e_no3i)*scaleant(i, iant, j, p_scant_no3i))*g_alt(i, k, &
&              j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_pm25j)*scaleant(i&
&              , iant, j, p_scant_pm25j)+emis_ant(i, k, j, p_e_pm25i)*&
&              scaleant(i, iant, j, p_scant_pm25i)+emis_ant(i, k, j, &
&              p_e_no3j)*scaleant(i, iant, j, p_scant_no3j)+emis_ant(i, k&
&              , j, p_e_no3i)*scaleant(i, iant, j, p_scant_no3i))*alt(i, &
&              k, j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
            chem(i, k, j, p_p25) = chem(i, k, j, p_p25) + (emis_ant(i, k&
&              , j, p_e_pm25j)*scaleant(i, iant, j, p_scant_pm25j)+&
&              emis_ant(i, k, j, p_e_pm25i)*scaleant(i, iant, j, &
&              p_scant_pm25i)+emis_ant(i, k, j, p_e_no3j)*scaleant(i,  &
&              iant, j, p_scant_no3j)+emis_ant(i, k, j, p_e_no3i)*scaleant(i&
&              , iant, j, p_scant_no3i))*alt(i, k, j)*dtstep/dz8w(i, k, j&
&              )
            g_chem(i, k, j, p_sulf) = g_chem(i, k, j, p_sulf) + 1.e-3*&
&              mwdry*(dtstep*((emis_ant(i, k, j, p_e_so4i)*g_scaleant(i, &
&              iant, j, p_scant_so4i)+emis_ant(i, k, j, p_e_so4j)*&
&              g_scaleant(i, iant, j, p_scant_so4j))*alt(i, k, j)+(&
&              emis_ant(i, k, j, p_e_so4i)*scaleant(i, iant, j, &
&              p_scant_so4i)+emis_ant(i, k, j, p_e_so4j)*scaleant(i,  &
&              iant, j, p_scant_so4j))*g_alt(i, k, j))*dz8w(i, k, j)-(&
&              emis_ant(i, k, j, p_e_so4i)*scaleant(i, iant, j, &
&              p_scant_so4i)+emis_ant(i, k, j, p_e_so4j)*scaleant(i,  &
&              iant, j, p_scant_so4j))*alt(i, k, j)*dtstep*g_dz8w(i, k, j))/&
&              (dz8w(i, k, j)**2*mw_so4_aer)
            chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) + (emis_ant(i&
&              , k, j, p_e_so4i)*scaleant(i, iant, j, p_scant_so4i)+&
&              emis_ant(i, k, j, p_e_so4j)*scaleant(i, iant, j, &
&              p_scant_so4j))*alt(i, k, j)*dtstep/dz8w(i, k, j)*mwdry/&
&              mw_so4_aer*1.e-3
          END DO
        END DO
      END DO
    CASE (GOCART_SIMPLE) 
      IF (config_flags%emiss_opt .LE. 5) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min2 = kte - ksub
            ELSE
              min2 = config_flags%kemit
            END IF
            DO k=kts,min2
              g_conv = (-(dtstep*4.828e-4*g_rho_phy(i, k, j)*dz8w(i, k, &
&                j)*60./rho_phy(i, k, j)**2)-4.828e-4*dtstep*60.*g_dz8w(i&
&                , k, j)/rho_phy(i, k, j))/(dz8w(i, k, j)*60.)**2
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              g_chem(i, k, j, p_so2) = g_chem(i, k, j, p_so2) + emis_ant&
&                (i, k, j, p_e_so2)*(g_scaleant(i, iant, j, p_scant_so2)*&
&                conv+scaleant(i, iant, j, p_scant_so2)*g_conv)
              chem(i, k, j, p_so2) = chem(i, k, j, p_so2) + emis_ant(i, &
&                k, j, p_e_so2)*scaleant(i, iant, j, p_scant_so2)*conv
              g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_eci)*g_scaleant(i, iant, j, &
&                p_scant_eci)+emis_ant(i, k, j, p_e_ecj)*g_scaleant(i,&
&                 iant, j, p_scant_ecj))*alt(i, k, j)+(emis_ant(i, k, j, &
&                p_e_eci)*scaleant(i, iant, j, p_scant_eci)+emis_ant(i, k&
&                , j, p_e_ecj)*scaleant(i, iant, j, p_scant_ecj))*g_alt(i&
&                , k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_eci)*&
&                scaleant(i, iant, j, p_scant_eci)+emis_ant(i, k, j, &
&                p_e_ecj)*scaleant(i, iant, j, p_scant_ecj))*alt(i, k, j)&
&                *dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + (emis_ant(i&
&                , k, j, p_e_eci)*scaleant(i, iant, j, p_scant_eci)+&
&                emis_ant(i, k, j, p_e_ecj)*scaleant(i, iant, j, &
&                p_scant_ecj))*alt(i, k, j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_oc1) = g_chem(i, k, j, p_oc1) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_orgj)*g_scaleant(i, iant, j, &
&                p_scant_orgj)+emis_ant(i, k, j, p_e_orgi)*g_scaleant(i, &
&                iant, j, p_scant_orgi))*alt(i, k, j)+(emis_ant(i, k, j, &
&                p_e_orgj)*scaleant(i, iant, j, p_scant_orgj)+emis_ant(i&
&                , k, j, p_e_orgi)*scaleant(i, iant, j, p_scant_orgi))*&
&                g_alt(i, k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, &
&                p_e_orgj)*scaleant(i, iant, j, p_scant_orgj)+emis_ant(i&
&                , k, j, p_e_orgi)*scaleant(i, iant, j, p_scant_orgi))*&
&                alt(i, k, j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_oc1) = chem(i, k, j, p_oc1) + (emis_ant(i&
&                , k, j, p_e_orgj)*scaleant(i, iant, j, p_scant_orgj)+&
&                emis_ant(i, k, j, p_e_orgi)*scaleant(i, iant, j, &
&                p_scant_orgi))*alt(i, k, j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_p25) = g_chem(i, k, j, p_p25) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_pm25j)*g_scaleant(i, iant, j, &
&                p_scant_pm25j)+emis_ant(i, k, j, p_e_pm25i)*g_scaleant(i&
&                , iant, j, p_scant_pm25i)+emis_ant(i, k, j, p_e_no3j)*&
&                g_scaleant(i, iant, j, p_scant_no3j)+emis_ant(i, k, j, &
&                p_e_no3i)*g_scaleant(i, iant, j, p_scant_no3i))*alt(i, k&
&                , j)+(emis_ant(i, k, j, p_e_pm25j)*scaleant(i, iant, j, &
&                p_scant_pm25j)+emis_ant(i, k, j, p_e_pm25i)*scaleant(i, &
&                iant, j, p_scant_pm25i)+emis_ant(i, k, j, p_e_no3j)*&
&                scaleant(i, iant, j, p_scant_no3j)+emis_ant(i, k, j, &
&                p_e_no3i)*scaleant(i, iant, j, p_scant_no3i))*g_alt(i, k&
&                , j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_pm25j)*&
&                scaleant(i, iant, j, p_scant_pm25j)+emis_ant(i, k, j, &
&                p_e_pm25i)*scaleant(i, iant, j, p_scant_pm25i)+emis_ant(&
&                i, k, j, p_e_no3j)*scaleant(i, iant, j, p_scant_no3j)+&
&                emis_ant(i, k, j, p_e_no3i)*scaleant(i, iant, j, &
&                p_scant_no3i))*alt(i, k, j)*dtstep*g_dz8w(i, k, j))/dz8w&
&                (i, k, j)**2
              chem(i, k, j, p_p25) = chem(i, k, j, p_p25) + (emis_ant(i&
&                , k, j, p_e_pm25j)*scaleant(i, iant, j, p_scant_pm25j)+&
&                emis_ant(i, k, j, p_e_pm25i)*scaleant(i, iant, j, &
&                p_scant_pm25i)+emis_ant(i, k, j, p_e_no3j)*scaleant(i,&
&                 iant, j, p_scant_no3j)+emis_ant(i, k, j, p_e_no3i)*&
&                scaleant(i, iant, j, p_scant_no3i))*alt(i, k, j)*dtstep/&
&                dz8w(i, k, j)
              g_chem(i, k, j, p_sulf) = g_chem(i, k, j, p_sulf) + 1.e-3*&
&                mwdry*(dtstep*((emis_ant(i, k, j, p_e_so4i)*g_scaleant(i&
&                , iant, j, p_scant_so4i)+emis_ant(i, k, j, p_e_so4j)*&
&                g_scaleant(i, iant, j, p_scant_so4j))*alt(i, k, j)+(&
&                emis_ant(i, k, j, p_e_so4i)*scaleant(i, iant, j, &
&                p_scant_so4i)+emis_ant(i, k, j, p_e_so4j)*scaleant(i,&
&                 iant, j, p_scant_so4j))*g_alt(i, k, j))*dz8w(i, k, j)-(&
&                emis_ant(i, k, j, p_e_so4i)*scaleant(i, iant, j, &
&                p_scant_so4i)+emis_ant(i, k, j, p_e_so4j)*scaleant(i,&
&                 iant, j, p_scant_so4j))*alt(i, k, j)*dtstep*g_dz8w(i, k, &
&                j))/(dz8w(i, k, j)**2*mw_so4_aer)
              chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) + (emis_ant(&
&                i, k, j, p_e_so4i)*scaleant(i, iant, j, p_scant_so4i)+&
&                emis_ant(i, k, j, p_e_so4j)*scaleant(i, iant, j, &
&                p_scant_so4j))*alt(i, k, j)*dtstep/dz8w(i, k, j)*mwdry/&
&                mw_so4_aer*1.e-3
            END DO
          END DO
        END DO
      END IF
      IF (config_flags%emiss_opt .EQ. 6) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min3 = kte - ksub
            ELSE
              min3 = config_flags%kemit
            END IF
            DO k=kts,min3
              g_conv = (-(dtstep*4.828e-4*g_rho_phy(i, k, j)*dz8w(i, k, &
&                j)*60./rho_phy(i, k, j)**2)-4.828e-4*dtstep*60.*g_dz8w(i&
&                , k, j)/rho_phy(i, k, j))/(dz8w(i, k, j)*60.)**2
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              g_chem(i, k, j, p_so2) = g_chem(i, k, j, p_so2) + emis_ant&
&                (i, k, j, p_e_so2)*(g_scaleant(i, iant, j, p_scant_so2)*&
&                conv+scaleant(i, iant, j, p_scant_so2)*g_conv)
              chem(i, k, j, p_so2) = chem(i, k, j, p_so2) + emis_ant(i, &
&                k, j, p_e_so2)*scaleant(i, iant, j, p_scant_so2)*conv
              g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (&
&                emis_ant(i, k, j, p_e_bc)*dtstep*(g_scaleant(i, iant, j&
&                , p_scant_bc)*alt(i, k, j)+scaleant(i, iant, j, &
&                p_scant_bc)*g_alt(i, k, j))*dz8w(i, k, j)-emis_ant(i, k&
&                , j, p_e_bc)*scaleant(i, iant, j, p_scant_bc)*alt(i, k, &
&                j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + emis_ant(i, &
&                k, j, p_e_bc)*scaleant(i, iant, j, p_scant_bc)*alt(i, k&
&                , j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_oc1) = g_chem(i, k, j, p_oc1) + (&
&                emis_ant(i, k, j, p_e_oc)*dtstep*(g_scaleant(i, iant, j&
&                , p_scant_oc)*alt(i, k, j)+scaleant(i, iant, j, &
&                p_scant_oc)*g_alt(i, k, j))*dz8w(i, k, j)-emis_ant(i, k&
&                , j, p_e_oc)*scaleant(i, iant, j, p_scant_oc)*alt(i, k, &
&                j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_oc1) = chem(i, k, j, p_oc1) + emis_ant(i, &
&                k, j, p_e_oc)*scaleant(i, iant, j, p_scant_oc)*alt(i, k&
&                , j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_p25) = g_chem(i, k, j, p_p25) + (&
&                emis_ant(i, k, j, p_e_pm_25)*dtstep*(g_scaleant(i,  &
&                iant, j, p_scant_pm_25)*alt(i, k, j)+scaleant(i, iant, j, &
&                p_scant_pm_25)*g_alt(i, k, j))*dz8w(i, k, j)-emis_ant(i&
&                , k, j, p_e_pm_25)*scaleant(i, iant, j, p_scant_pm_25)*&
&                alt(i, k, j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_p25) = chem(i, k, j, p_p25) + emis_ant(i, &
&                k, j, p_e_pm_25)*scaleant(i, iant, j, p_scant_pm_25)*alt&
&                (i, k, j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_p10) = g_chem(i, k, j, p_p10) + (&
&                emis_ant(i, k, j, p_e_pm_10)*dtstep*(g_scaleant(i,  &
&                iant, j, p_scant_pm_10)*alt(i, k, j)+scaleant(i, iant, j, &
&                p_scant_pm_10)*g_alt(i, k, j))*dz8w(i, k, j)-emis_ant(i&
&                , k, j, p_e_pm_10)*scaleant(i, iant, j, p_scant_pm_10)*&
&                alt(i, k, j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_p10) = chem(i, k, j, p_p10) + emis_ant(i, &
&                k, j, p_e_pm_10)*scaleant(i, iant, j, p_scant_pm_10)*alt&
&                (i, k, j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_sulf) = g_chem(i, k, j, p_sulf) + &
&                emis_ant(i, k, j, p_e_sulf)*(g_scaleant(i, iant, j, &
&                p_scant_sulf)*conv+scaleant(i, iant, j, p_scant_sulf)*&
&                g_conv)
              chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) + emis_ant(i&
&                , k, j, p_e_sulf)*scaleant(i, iant, j, p_scant_sulf)*&
&                conv
            END DO
          END DO
        END DO
      END IF
      IF (config_flags%emiss_opt .EQ. ADTLANT) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min4 = kte - ksub
            ELSE
              min4 = config_flags%kemit
            END IF
            DO k=kts,min4
              g_conv = (-(dtstep*4.828e-4*g_rho_phy(i, k, j)*dz8w(i, k, &
&                j)*60./rho_phy(i, k, j)**2)-4.828e-4*dtstep*60.*g_dz8w(i&
&                , k, j)/rho_phy(i, k, j))/(dz8w(i, k, j)*60.)**2
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              g_chem(i, k, j, p_so2) = g_chem(i, k, j, p_so2) + emis_ant&
&                (i, k, j, p_e_so2)*(g_scaleant(i, iant, j, p_scant_so2)*&
&                conv+scaleant(i, iant, j, p_scant_so2)*g_conv)
              chem(i, k, j, p_so2) = chem(i, k, j, p_so2) + emis_ant(i, &
&                k, j, p_e_so2)*scaleant(i, iant, j, p_scant_so2)*conv
              g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_eci)*g_scaleant(i, iant, j, &
&                p_scant_bc)+emis_ant(i, k, j, p_e_ecj)*g_scaleant(i,  &
&                iant, j, p_scant_bc))*alt(i, k, j)+(emis_ant(i, k, j, &
&                p_e_eci)*scaleant(i, iant, j, p_scant_bc)+emis_ant(i, k&
&                , j, p_e_ecj)*scaleant(i, iant, j, p_scant_bc))*g_alt(i&
&                , k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_eci)*&
&                scaleant(i, iant, j, p_scant_bc)+emis_ant(i, k, j, &
&                p_e_ecj)*scaleant(i, iant, j, p_scant_bc))*alt(i, k, j)*&
&                dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + (emis_ant(i&
&                , k, j, p_e_eci)*scaleant(i, iant, j, p_scant_bc)+&
&                emis_ant(i, k, j, p_e_ecj)*scaleant(i, iant, j, &
&                p_scant_bc))*alt(i, k, j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_oc1) = g_chem(i, k, j, p_oc1) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_orgj)*g_scaleant(i, iant, j, &
&                p_scant_oc)+emis_ant(i, k, j, p_e_orgi)*g_scaleant(i,&
&                 iant, j, p_scant_oc))*alt(i, k, j)+(emis_ant(i, k, j, &
&                p_e_orgj)*scaleant(i, iant, j, p_scant_oc)+emis_ant(i, k&
&                , j, p_e_orgi)*scaleant(i, iant, j, p_scant_oc))*g_alt(i&
&                , k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_orgj)*&
&                scaleant(i, iant, j, p_scant_oc)+emis_ant(i, k, j, &
&                p_e_orgi)*scaleant(i, iant, j, p_scant_oc))*alt(i, k, j)&
&                *dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_oc1) = chem(i, k, j, p_oc1) + (emis_ant(i&
&                , k, j, p_e_orgj)*scaleant(i, iant, j, p_scant_oc)+&
&                emis_ant(i, k, j, p_e_orgi)*scaleant(i, iant, j, &
&                p_scant_oc))*alt(i, k, j)*dtstep/dz8w(i, k, j)
              g_chem(i, k, j, p_p25) = g_chem(i, k, j, p_p25) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_pm25j)*g_scaleant(i, iant, j, &
&                p_scant_pm_25)+emis_ant(i, k, j, p_e_pm25i)*g_scaleant(i&
&                , iant, j, p_scant_pm_25)+emis_ant(i, k, j, p_e_no3j)*&
&                g_scaleant(i, iant, j, p_scant_no3)+emis_ant(i, k, j, &
&                p_e_no3i)*g_scaleant(i, iant, j, p_scant_no3))*alt(i, k&
&                , j)+(emis_ant(i, k, j, p_e_pm25j)*scaleant(i, iant, j, &
&                p_scant_pm_25)+emis_ant(i, k, j, p_e_pm25i)*scaleant(i, &
&                iant, j, p_scant_pm_25)+emis_ant(i, k, j, p_e_no3j)*&
&                scaleant(i, iant, j, p_scant_no3)+emis_ant(i, k, j, &
&                p_e_no3i)*scaleant(i, iant, j, p_scant_no3))*g_alt(i, k&
&                , j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_pm25j)*&
&                scaleant(i, iant, j, p_scant_pm_25)+emis_ant(i, k, j, &
&                p_e_pm25i)*scaleant(i, iant, j, p_scant_pm_25)+emis_ant(&
&                i, k, j, p_e_no3j)*scaleant(i, iant, j, p_scant_no3)+&
&                emis_ant(i, k, j, p_e_no3i)*scaleant(i, iant, j, &
&                p_scant_no3))*alt(i, k, j)*dtstep*g_dz8w(i, k, j))/dz8w(&
&                i, k, j)**2
              chem(i, k, j, p_p25) = chem(i, k, j, p_p25) + (emis_ant(i&
&                , k, j, p_e_pm25j)*scaleant(i, iant, j, p_scant_pm_25)+&
&                emis_ant(i, k, j, p_e_pm25i)*scaleant(i, iant, j, &
&                p_scant_pm_25)+emis_ant(i, k, j, p_e_no3j)*scaleant(i,&
&                 iant, j, p_scant_no3)+emis_ant(i, k, j, p_e_no3i)*&
&                scaleant(i, iant, j, p_scant_no3))*alt(i, k, j)*dtstep/&
&                dz8w(i, k, j)
              g_chem(i, k, j, p_sulf) = g_chem(i, k, j, p_sulf) + 1.e-3*&
&                mwdry*(dtstep*((emis_ant(i, k, j, p_e_so4i)*g_scaleant(i&
&                , iant, j, p_scant_sulf)+emis_ant(i, k, j, p_e_so4j)*&
&                g_scaleant(i, iant, j, p_scant_sulf))*alt(i, k, j)+(&
&                emis_ant(i, k, j, p_e_so4i)*scaleant(i, iant, j, &
&                p_scant_sulf)+emis_ant(i, k, j, p_e_so4j)*scaleant(i,&
&                 iant, j, p_scant_sulf))*g_alt(i, k, j))*dz8w(i, k, j)-(&
&                emis_ant(i, k, j, p_e_so4i)*scaleant(i, iant, j, &
&                p_scant_sulf)+emis_ant(i, k, j, p_e_so4j)*scaleant(i,&
&                 iant, j, p_scant_sulf))*alt(i, k, j)*dtstep*g_dz8w(i, k, &
&                j))/(dz8w(i, k, j)**2*mw_so4_aer)
              chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) + (emis_ant(&
&                i, k, j, p_e_so4i)*scaleant(i, iant, j, p_scant_sulf)+&
&                emis_ant(i, k, j, p_e_so4j)*scaleant(i, iant, j, &
&                p_scant_sulf))*alt(i, k, j)*dtstep/dz8w(i, k, j)*mwdry/&
&                mw_so4_aer*1.e-3
            END DO
          END DO
        END DO
      END IF
    CASE (GOCART_BCCO, GOCART_BC) 
      IF (config_flags%emiss_opt .LE. 5) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min2 = kte - ksub
            ELSE
              min2 = config_flags%kemit
            END IF
            DO k=kts,min2
              g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_eci)*g_scaleant(i, iant, j, &
&                p_scant_eci)+emis_ant(i, k, j, p_e_ecj)*g_scaleant(i,&
&                 iant, j, p_scant_ecj))*alt(i, k, j)+(emis_ant(i, k, j, &
&                p_e_eci)*scaleant(i, iant, j, p_scant_eci)+emis_ant(i, k&
&                , j, p_e_ecj)*scaleant(i, iant, j, p_scant_ecj))*g_alt(i&
&                , k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_eci)*&
&                scaleant(i, iant, j, p_scant_eci)+emis_ant(i, k, j, &
&                p_e_ecj)*scaleant(i, iant, j, p_scant_ecj))*alt(i, k, j)&
&                *dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + (emis_ant(i&
&                , k, j, p_e_eci)*scaleant(i, iant, j, p_scant_eci)+&
&                emis_ant(i, k, j, p_e_ecj)*scaleant(i, iant, j, &
&                p_scant_ecj))*alt(i, k, j)*dtstep/dz8w(i, k, j)
            END DO
          END DO
        END DO
      END IF
      IF (config_flags%emiss_opt .EQ. 6) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min3 = kte - ksub
            ELSE
              min3 = config_flags%kemit
            END IF
            DO k=kts,min3
              g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (&
&                emis_ant(i, k, j, p_e_bc)*dtstep*(g_scaleant(i, iant, j&
&                , p_scant_bc)*alt(i, k, j)+scaleant(i, iant, j, &
&                p_scant_bc)*g_alt(i, k, j))*dz8w(i, k, j)-emis_ant(i, k&
&                , j, p_e_bc)*scaleant(i, iant, j, p_scant_bc)*alt(i, k, &
&                j)*dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + emis_ant(i, &
&                k, j, p_e_bc)*scaleant(i, iant, j, p_scant_bc)*alt(i, k&
&                , j)*dtstep/dz8w(i, k, j)
            END DO
          END DO
        END DO
      END IF
      IF(config_flags%emiss_opt == ADTLANT_BCCO .OR. &
         config_flags%emiss_opt == ADTLANT_BC &
       ) THEN
        DO j=jts,jte
          DO i=its,ite
            IF (config_flags%kemit .GT. kte - ksub) THEN
              min4 = kte - ksub
            ELSE
              min4 = config_flags%kemit
            END IF
            DO k=kts,min4
              g_conv = (-(dtstep*4.828e-4*g_rho_phy(i, k, j)*dz8w(i, k, &
&                j)*60./rho_phy(i, k, j)**2)-4.828e-4*dtstep*60.*g_dz8w(i&
&                , k, j)/rho_phy(i, k, j))/(dz8w(i, k, j)*60.)**2
              conv = 4.828e-4/rho_phy(i, k, j)*dtstep/(dz8w(i, k, j)*60.&
&                )
              g_chem(i, k, j, p_bc1) = g_chem(i, k, j, p_bc1) + (dtstep*&
&                ((emis_ant(i, k, j, p_e_eci)*g_scaleant(i, iant, j, &
&                p_scant_bc)+emis_ant(i, k, j, p_e_ecj)*g_scaleant(i,  &
&                iant, j, p_scant_bc))*alt(i, k, j)+(emis_ant(i, k, j, &
&                p_e_eci)*scaleant(i, iant, j, p_scant_bc)+emis_ant(i, k&
&                , j, p_e_ecj)*scaleant(i, iant, j, p_scant_bc))*g_alt(i&
&                , k, j))*dz8w(i, k, j)-(emis_ant(i, k, j, p_e_eci)*&
&                scaleant(i, iant, j, p_scant_bc)+emis_ant(i, k, j, &
&                p_e_ecj)*scaleant(i, iant, j, p_scant_bc))*alt(i, k, j)*&
&                dtstep*g_dz8w(i, k, j))/dz8w(i, k, j)**2
              chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) + (emis_ant(i&
&                , k, j, p_e_eci)*scaleant(i, iant, j, p_scant_bc)+&
&                emis_ant(i, k, j, p_e_ecj)*scaleant(i, iant, j, &
&                p_scant_bc))*alt(i, k, j)*dtstep/dz8w(i, k, j)

              IF (config_flags%emiss_opt .EQ. ADTLANT_BCCO) THEN
                g_chem(i, k, j, p_co) = g_chem(i, k, j, p_co) + emis_ant(i, k&
    &              , j, p_e_co)*(g_scaleant(i, iant, j, p_scant_co)*conv+scaleant&
    &              (i, iant, j, p_scant_co)*g_conv)
                chem(i, k, j, p_co) = chem(i, k, j, p_co) + emis_ant(i, k, j, &
    &              p_e_co)*scaleant(i, iant, j, p_scant_co)*conv
              END IF
            END DO
          END DO
        END DO
      END IF
    CASE DEFAULT
      CALL WRF_DEBUG(15, &
&               'emissions_driver NOT CALLING gas add_... routines')
    END SELECT
  END SUBROUTINE g_emissions_driver
END MODULE g_module_emissions_driver
